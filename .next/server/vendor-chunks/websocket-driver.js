"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/websocket-driver";
exports.ids = ["vendor-chunks/websocket-driver"];
exports.modules = {

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver.js":
/*!***************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// Protocol references:\n//\n// * http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-75\n// * http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol-76\n// * http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-17\nvar Base = __webpack_require__(/*! ./driver/base */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/base.js\"), Client = __webpack_require__(/*! ./driver/client */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/client.js\"), Server = __webpack_require__(/*! ./driver/server */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/server.js\");\nvar Driver = {\n    client: function(url, options) {\n        options = options || {};\n        if (options.masking === undefined) options.masking = true;\n        return new Client(url, options);\n    },\n    server: function(options) {\n        options = options || {};\n        if (options.requireMasking === undefined) options.requireMasking = true;\n        return new Server(options);\n    },\n    http: function() {\n        return Server.http.apply(Server, arguments);\n    },\n    isSecureRequest: function(request) {\n        return Server.isSecureRequest(request);\n    },\n    isWebSocket: function(request) {\n        return Base.isWebSocket(request);\n    },\n    validateOptions: function(options, validKeys) {\n        Base.validateOptions(options, validKeys);\n    }\n};\nmodule.exports = Driver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0LWRyaXZlci9saWIvd2Vic29ja2V0L2RyaXZlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLHVCQUF1QjtBQUN2QixFQUFFO0FBQ0YsbUVBQW1FO0FBQ25FLG1FQUFtRTtBQUNuRSx1RUFBdUU7QUFFdkUsSUFBSUEsT0FBU0MsbUJBQU9BLENBQUMsNEZBQ2pCQyxTQUFTRCxtQkFBT0EsQ0FBQyxnR0FDakJFLFNBQVNGLG1CQUFPQSxDQUFDO0FBRXJCLElBQUlHLFNBQVM7SUFDWEMsUUFBUSxTQUFTQyxHQUFHLEVBQUVDLE9BQU87UUFDM0JBLFVBQVVBLFdBQVcsQ0FBQztRQUN0QixJQUFJQSxRQUFRQyxPQUFPLEtBQUtDLFdBQVdGLFFBQVFDLE9BQU8sR0FBRztRQUNyRCxPQUFPLElBQUlOLE9BQU9JLEtBQUtDO0lBQ3pCO0lBRUFHLFFBQVEsU0FBU0gsT0FBTztRQUN0QkEsVUFBVUEsV0FBVyxDQUFDO1FBQ3RCLElBQUlBLFFBQVFJLGNBQWMsS0FBS0YsV0FBV0YsUUFBUUksY0FBYyxHQUFHO1FBQ25FLE9BQU8sSUFBSVIsT0FBT0k7SUFDcEI7SUFFQUssTUFBTTtRQUNKLE9BQU9ULE9BQU9TLElBQUksQ0FBQ0MsS0FBSyxDQUFDVixRQUFRVztJQUNuQztJQUVBQyxpQkFBaUIsU0FBU0MsT0FBTztRQUMvQixPQUFPYixPQUFPWSxlQUFlLENBQUNDO0lBQ2hDO0lBRUFDLGFBQWEsU0FBU0QsT0FBTztRQUMzQixPQUFPaEIsS0FBS2lCLFdBQVcsQ0FBQ0Q7SUFDMUI7SUFFQUUsaUJBQWlCLFNBQVNYLE9BQU8sRUFBRVksU0FBUztRQUMxQ25CLEtBQUtrQixlQUFlLENBQUNYLFNBQVNZO0lBQ2hDO0FBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95b3Vzc2VmLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy93ZWJzb2NrZXQtZHJpdmVyL2xpYi93ZWJzb2NrZXQvZHJpdmVyLmpzPzRhN2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBQcm90b2NvbCByZWZlcmVuY2VzOlxuLy9cbi8vICogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtaGl4aWUtdGhld2Vic29ja2V0cHJvdG9jb2wtNzVcbi8vICogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtaGl4aWUtdGhld2Vic29ja2V0cHJvdG9jb2wtNzZcbi8vICogaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtaWV0Zi1oeWJpLXRoZXdlYnNvY2tldHByb3RvY29sLTE3XG5cbnZhciBCYXNlICAgPSByZXF1aXJlKCcuL2RyaXZlci9iYXNlJyksXG4gICAgQ2xpZW50ID0gcmVxdWlyZSgnLi9kcml2ZXIvY2xpZW50JyksXG4gICAgU2VydmVyID0gcmVxdWlyZSgnLi9kcml2ZXIvc2VydmVyJyk7XG5cbnZhciBEcml2ZXIgPSB7XG4gIGNsaWVudDogZnVuY3Rpb24odXJsLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgaWYgKG9wdGlvbnMubWFza2luZyA9PT0gdW5kZWZpbmVkKSBvcHRpb25zLm1hc2tpbmcgPSB0cnVlO1xuICAgIHJldHVybiBuZXcgQ2xpZW50KHVybCwgb3B0aW9ucyk7XG4gIH0sXG5cbiAgc2VydmVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgaWYgKG9wdGlvbnMucmVxdWlyZU1hc2tpbmcgPT09IHVuZGVmaW5lZCkgb3B0aW9ucy5yZXF1aXJlTWFza2luZyA9IHRydWU7XG4gICAgcmV0dXJuIG5ldyBTZXJ2ZXIob3B0aW9ucyk7XG4gIH0sXG5cbiAgaHR0cDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFNlcnZlci5odHRwLmFwcGx5KFNlcnZlciwgYXJndW1lbnRzKTtcbiAgfSxcblxuICBpc1NlY3VyZVJlcXVlc3Q6IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiAgICByZXR1cm4gU2VydmVyLmlzU2VjdXJlUmVxdWVzdChyZXF1ZXN0KTtcbiAgfSxcblxuICBpc1dlYlNvY2tldDogZnVuY3Rpb24ocmVxdWVzdCkge1xuICAgIHJldHVybiBCYXNlLmlzV2ViU29ja2V0KHJlcXVlc3QpO1xuICB9LFxuXG4gIHZhbGlkYXRlT3B0aW9uczogZnVuY3Rpb24ob3B0aW9ucywgdmFsaWRLZXlzKSB7XG4gICAgQmFzZS52YWxpZGF0ZU9wdGlvbnMob3B0aW9ucywgdmFsaWRLZXlzKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcml2ZXI7XG4iXSwibmFtZXMiOlsiQmFzZSIsInJlcXVpcmUiLCJDbGllbnQiLCJTZXJ2ZXIiLCJEcml2ZXIiLCJjbGllbnQiLCJ1cmwiLCJvcHRpb25zIiwibWFza2luZyIsInVuZGVmaW5lZCIsInNlcnZlciIsInJlcXVpcmVNYXNraW5nIiwiaHR0cCIsImFwcGx5IiwiYXJndW1lbnRzIiwiaXNTZWN1cmVSZXF1ZXN0IiwicmVxdWVzdCIsImlzV2ViU29ja2V0IiwidmFsaWRhdGVPcHRpb25zIiwidmFsaWRLZXlzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver/base.js":
/*!********************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver/base.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer), Emitter = (__webpack_require__(/*! events */ \"events\").EventEmitter), util = __webpack_require__(/*! util */ \"util\"), streams = __webpack_require__(/*! ../streams */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/streams.js\"), Headers = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/headers.js\"), Reader = __webpack_require__(/*! ./stream_reader */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/stream_reader.js\");\nvar Base = function(request, url, options) {\n    Emitter.call(this);\n    Base.validateOptions(options || {}, [\n        \"maxLength\",\n        \"masking\",\n        \"requireMasking\",\n        \"protocols\"\n    ]);\n    this._request = request;\n    this._reader = new Reader();\n    this._options = options || {};\n    this._maxLength = this._options.maxLength || this.MAX_LENGTH;\n    this._headers = new Headers();\n    this.__queue = [];\n    this.readyState = 0;\n    this.url = url;\n    this.io = new streams.IO(this);\n    this.messages = new streams.Messages(this);\n    this._bindEventListeners();\n};\nutil.inherits(Base, Emitter);\nBase.isWebSocket = function(request) {\n    var connection = request.headers.connection || \"\", upgrade = request.headers.upgrade || \"\";\n    return request.method === \"GET\" && connection.toLowerCase().split(/ *, */).indexOf(\"upgrade\") >= 0 && upgrade.toLowerCase() === \"websocket\";\n};\nBase.validateOptions = function(options, validKeys) {\n    for(var key in options){\n        if (validKeys.indexOf(key) < 0) throw new Error(\"Unrecognized option: \" + key);\n    }\n};\nvar instance = {\n    // This is 64MB, small enough for an average VPS to handle without\n    // crashing from process out of memory\n    MAX_LENGTH: 0x3ffffff,\n    STATES: [\n        \"connecting\",\n        \"open\",\n        \"closing\",\n        \"closed\"\n    ],\n    _bindEventListeners: function() {\n        var self = this;\n        // Protocol errors are informational and do not have to be handled\n        this.messages.on(\"error\", function() {});\n        this.on(\"message\", function(event) {\n            var messages = self.messages;\n            if (messages.readable) messages.emit(\"data\", event.data);\n        });\n        this.on(\"error\", function(error) {\n            var messages = self.messages;\n            if (messages.readable) messages.emit(\"error\", error);\n        });\n        this.on(\"close\", function() {\n            var messages = self.messages;\n            if (!messages.readable) return;\n            messages.readable = messages.writable = false;\n            messages.emit(\"end\");\n        });\n    },\n    getState: function() {\n        return this.STATES[this.readyState] || null;\n    },\n    addExtension: function(extension) {\n        return false;\n    },\n    setHeader: function(name, value) {\n        if (this.readyState > 0) return false;\n        this._headers.set(name, value);\n        return true;\n    },\n    start: function() {\n        if (this.readyState !== 0) return false;\n        if (!Base.isWebSocket(this._request)) return this._failHandshake(new Error(\"Not a WebSocket request\"));\n        var response;\n        try {\n            response = this._handshakeResponse();\n        } catch (error) {\n            return this._failHandshake(error);\n        }\n        this._write(response);\n        if (this._stage !== -1) this._open();\n        return true;\n    },\n    _failHandshake: function(error) {\n        var headers = new Headers();\n        headers.set(\"Content-Type\", \"text/plain\");\n        headers.set(\"Content-Length\", Buffer.byteLength(error.message, \"utf8\"));\n        headers = [\n            \"HTTP/1.1 400 Bad Request\",\n            headers.toString(),\n            error.message\n        ];\n        this._write(Buffer.from(headers.join(\"\\r\\n\"), \"utf8\"));\n        this._fail(\"protocol_error\", error.message);\n        return false;\n    },\n    text: function(message) {\n        return this.frame(message);\n    },\n    binary: function(message) {\n        return false;\n    },\n    ping: function() {\n        return false;\n    },\n    pong: function() {\n        return false;\n    },\n    close: function(reason, code) {\n        if (this.readyState !== 1) return false;\n        this.readyState = 3;\n        this.emit(\"close\", new Base.CloseEvent(null, null));\n        return true;\n    },\n    _open: function() {\n        this.readyState = 1;\n        this.__queue.forEach(function(args) {\n            this.frame.apply(this, args);\n        }, this);\n        this.__queue = [];\n        this.emit(\"open\", new Base.OpenEvent());\n    },\n    _queue: function(message) {\n        this.__queue.push(message);\n        return true;\n    },\n    _write: function(chunk) {\n        var io = this.io;\n        if (io.readable) io.emit(\"data\", chunk);\n    },\n    _fail: function(type, message) {\n        this.readyState = 2;\n        this.emit(\"error\", new Error(message));\n        this.close();\n    }\n};\nfor(var key in instance)Base.prototype[key] = instance[key];\nBase.ConnectEvent = function() {};\nBase.OpenEvent = function() {};\nBase.CloseEvent = function(code, reason) {\n    this.code = code;\n    this.reason = reason;\n};\nBase.MessageEvent = function(data) {\n    this.data = data;\n};\nBase.PingEvent = function(data) {\n    this.data = data;\n};\nBase.PongEvent = function(data) {\n    this.data = data;\n};\nmodule.exports = Base;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver/client.js":
/*!**********************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver/client.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer), crypto = __webpack_require__(/*! crypto */ \"crypto\"), url = __webpack_require__(/*! url */ \"url\"), util = __webpack_require__(/*! util */ \"util\"), HttpParser = __webpack_require__(/*! ../http_parser */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/http_parser.js\"), Base = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/base.js\"), Hybi = __webpack_require__(/*! ./hybi */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/hybi.js\"), Proxy = __webpack_require__(/*! ./proxy */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/proxy.js\");\nvar Client = function(_url, options) {\n    this.version = \"hybi-\" + Hybi.VERSION;\n    Hybi.call(this, null, _url, options);\n    this.readyState = -1;\n    this._key = Client.generateKey();\n    this._accept = Hybi.generateAccept(this._key);\n    this._http = new HttpParser(\"response\");\n    var uri = url.parse(this.url), auth = uri.auth && Buffer.from(uri.auth, \"utf8\").toString(\"base64\");\n    if (this.VALID_PROTOCOLS.indexOf(uri.protocol) < 0) throw new Error(this.url + \" is not a valid WebSocket URL\");\n    this._pathname = (uri.pathname || \"/\") + (uri.search || \"\");\n    this._headers.set(\"Host\", uri.host);\n    this._headers.set(\"Upgrade\", \"websocket\");\n    this._headers.set(\"Connection\", \"Upgrade\");\n    this._headers.set(\"Sec-WebSocket-Key\", this._key);\n    this._headers.set(\"Sec-WebSocket-Version\", Hybi.VERSION);\n    if (this._protocols.length > 0) this._headers.set(\"Sec-WebSocket-Protocol\", this._protocols.join(\", \"));\n    if (auth) this._headers.set(\"Authorization\", \"Basic \" + auth);\n};\nutil.inherits(Client, Hybi);\nClient.generateKey = function() {\n    return crypto.randomBytes(16).toString(\"base64\");\n};\nvar instance = {\n    VALID_PROTOCOLS: [\n        \"ws:\",\n        \"wss:\"\n    ],\n    proxy: function(origin, options) {\n        return new Proxy(this, origin, options);\n    },\n    start: function() {\n        if (this.readyState !== -1) return false;\n        this._write(this._handshakeRequest());\n        this.readyState = 0;\n        return true;\n    },\n    parse: function(chunk) {\n        if (this.readyState === 3) return;\n        if (this.readyState > 0) return Hybi.prototype.parse.call(this, chunk);\n        this._http.parse(chunk);\n        if (!this._http.isComplete()) return;\n        this._validateHandshake();\n        if (this.readyState === 3) return;\n        this._open();\n        this.parse(this._http.body);\n    },\n    _handshakeRequest: function() {\n        var extensions = this._extensions.generateOffer();\n        if (extensions) this._headers.set(\"Sec-WebSocket-Extensions\", extensions);\n        var start = \"GET \" + this._pathname + \" HTTP/1.1\", headers = [\n            start,\n            this._headers.toString(),\n            \"\"\n        ];\n        return Buffer.from(headers.join(\"\\r\\n\"), \"utf8\");\n    },\n    _failHandshake: function(message) {\n        message = \"Error during WebSocket handshake: \" + message;\n        this.readyState = 3;\n        this.emit(\"error\", new Error(message));\n        this.emit(\"close\", new Base.CloseEvent(this.ERRORS.protocol_error, message));\n    },\n    _validateHandshake: function() {\n        this.statusCode = this._http.statusCode;\n        this.headers = this._http.headers;\n        if (this._http.error) return this._failHandshake(this._http.error.message);\n        if (this._http.statusCode !== 101) return this._failHandshake(\"Unexpected response code: \" + this._http.statusCode);\n        var headers = this._http.headers, upgrade = headers[\"upgrade\"] || \"\", connection = headers[\"connection\"] || \"\", accept = headers[\"sec-websocket-accept\"] || \"\", protocol = headers[\"sec-websocket-protocol\"] || \"\";\n        if (upgrade === \"\") return this._failHandshake(\"'Upgrade' header is missing\");\n        if (upgrade.toLowerCase() !== \"websocket\") return this._failHandshake(\"'Upgrade' header value is not 'WebSocket'\");\n        if (connection === \"\") return this._failHandshake(\"'Connection' header is missing\");\n        if (connection.toLowerCase() !== \"upgrade\") return this._failHandshake(\"'Connection' header value is not 'Upgrade'\");\n        if (accept !== this._accept) return this._failHandshake(\"Sec-WebSocket-Accept mismatch\");\n        this.protocol = null;\n        if (protocol !== \"\") {\n            if (this._protocols.indexOf(protocol) < 0) return this._failHandshake(\"Sec-WebSocket-Protocol mismatch\");\n            else this.protocol = protocol;\n        }\n        try {\n            this._extensions.activate(this.headers[\"sec-websocket-extensions\"]);\n        } catch (e) {\n            return this._failHandshake(e.message);\n        }\n    }\n};\nfor(var key in instance)Client.prototype[key] = instance[key];\nmodule.exports = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver/draft75.js":
/*!***********************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver/draft75.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer), Base = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/base.js\"), util = __webpack_require__(/*! util */ \"util\");\nvar Draft75 = function(request, url, options) {\n    Base.apply(this, arguments);\n    this._stage = 0;\n    this.version = \"hixie-75\";\n    this._headers.set(\"Upgrade\", \"WebSocket\");\n    this._headers.set(\"Connection\", \"Upgrade\");\n    this._headers.set(\"WebSocket-Origin\", this._request.headers.origin);\n    this._headers.set(\"WebSocket-Location\", this.url);\n};\nutil.inherits(Draft75, Base);\nvar instance = {\n    close: function() {\n        if (this.readyState === 3) return false;\n        this.readyState = 3;\n        this.emit(\"close\", new Base.CloseEvent(null, null));\n        return true;\n    },\n    parse: function(chunk) {\n        if (this.readyState > 1) return;\n        this._reader.put(chunk);\n        this._reader.eachByte(function(octet) {\n            var message;\n            switch(this._stage){\n                case -1:\n                    this._body.push(octet);\n                    this._sendHandshakeBody();\n                    break;\n                case 0:\n                    this._parseLeadingByte(octet);\n                    break;\n                case 1:\n                    this._length = (octet & 0x7F) + 128 * this._length;\n                    if (this._closing && this._length === 0) {\n                        return this.close();\n                    } else if ((octet & 0x80) !== 0x80) {\n                        if (this._length === 0) {\n                            this._stage = 0;\n                        } else {\n                            this._skipped = 0;\n                            this._stage = 2;\n                        }\n                    }\n                    break;\n                case 2:\n                    if (octet === 0xFF) {\n                        this._stage = 0;\n                        message = Buffer.from(this._buffer).toString(\"utf8\", 0, this._buffer.length);\n                        this.emit(\"message\", new Base.MessageEvent(message));\n                    } else {\n                        if (this._length) {\n                            this._skipped += 1;\n                            if (this._skipped === this._length) this._stage = 0;\n                        } else {\n                            this._buffer.push(octet);\n                            if (this._buffer.length > this._maxLength) return this.close();\n                        }\n                    }\n                    break;\n            }\n        }, this);\n    },\n    frame: function(buffer) {\n        if (this.readyState === 0) return this._queue([\n            buffer\n        ]);\n        if (this.readyState > 1) return false;\n        if (typeof buffer !== \"string\") buffer = buffer.toString();\n        var length = Buffer.byteLength(buffer), frame = Buffer.allocUnsafe(length + 2);\n        frame[0] = 0x00;\n        frame.write(buffer, 1);\n        frame[frame.length - 1] = 0xFF;\n        this._write(frame);\n        return true;\n    },\n    _handshakeResponse: function() {\n        var start = \"HTTP/1.1 101 Web Socket Protocol Handshake\", headers = [\n            start,\n            this._headers.toString(),\n            \"\"\n        ];\n        return Buffer.from(headers.join(\"\\r\\n\"), \"utf8\");\n    },\n    _parseLeadingByte: function(octet) {\n        if ((octet & 0x80) === 0x80) {\n            this._length = 0;\n            this._stage = 1;\n        } else {\n            delete this._length;\n            delete this._skipped;\n            this._buffer = [];\n            this._stage = 2;\n        }\n    }\n};\nfor(var key in instance)Draft75.prototype[key] = instance[key];\nmodule.exports = Draft75;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver/draft75.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver/draft76.js":
/*!***********************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver/draft76.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer), Base = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/base.js\"), Draft75 = __webpack_require__(/*! ./draft75 */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/draft75.js\"), crypto = __webpack_require__(/*! crypto */ \"crypto\"), util = __webpack_require__(/*! util */ \"util\");\nvar numberFromKey = function(key) {\n    return parseInt((key.match(/[0-9]/g) || []).join(\"\"), 10);\n};\nvar spacesInKey = function(key) {\n    return (key.match(/ /g) || []).length;\n};\nvar Draft76 = function(request, url, options) {\n    Draft75.apply(this, arguments);\n    this._stage = -1;\n    this._body = [];\n    this.version = \"hixie-76\";\n    this._headers.clear();\n    this._headers.set(\"Upgrade\", \"WebSocket\");\n    this._headers.set(\"Connection\", \"Upgrade\");\n    this._headers.set(\"Sec-WebSocket-Origin\", this._request.headers.origin);\n    this._headers.set(\"Sec-WebSocket-Location\", this.url);\n};\nutil.inherits(Draft76, Draft75);\nvar instance = {\n    BODY_SIZE: 8,\n    start: function() {\n        if (!Draft75.prototype.start.call(this)) return false;\n        this._started = true;\n        this._sendHandshakeBody();\n        return true;\n    },\n    close: function() {\n        if (this.readyState === 3) return false;\n        if (this.readyState === 1) this._write(Buffer.from([\n            0xFF,\n            0x00\n        ]));\n        this.readyState = 3;\n        this.emit(\"close\", new Base.CloseEvent(null, null));\n        return true;\n    },\n    _handshakeResponse: function() {\n        var headers = this._request.headers, key1 = headers[\"sec-websocket-key1\"], key2 = headers[\"sec-websocket-key2\"];\n        if (!key1) throw new Error(\"Missing required header: Sec-WebSocket-Key1\");\n        if (!key2) throw new Error(\"Missing required header: Sec-WebSocket-Key2\");\n        var number1 = numberFromKey(key1), spaces1 = spacesInKey(key1), number2 = numberFromKey(key2), spaces2 = spacesInKey(key2);\n        if (number1 % spaces1 !== 0 || number2 % spaces2 !== 0) throw new Error(\"Client sent invalid Sec-WebSocket-Key headers\");\n        this._keyValues = [\n            number1 / spaces1,\n            number2 / spaces2\n        ];\n        var start = \"HTTP/1.1 101 WebSocket Protocol Handshake\", headers = [\n            start,\n            this._headers.toString(),\n            \"\"\n        ];\n        return Buffer.from(headers.join(\"\\r\\n\"), \"binary\");\n    },\n    _handshakeSignature: function() {\n        if (this._body.length < this.BODY_SIZE) return null;\n        var md5 = crypto.createHash(\"md5\"), buffer = Buffer.allocUnsafe(8 + this.BODY_SIZE);\n        buffer.writeUInt32BE(this._keyValues[0], 0);\n        buffer.writeUInt32BE(this._keyValues[1], 4);\n        Buffer.from(this._body).copy(buffer, 8, 0, this.BODY_SIZE);\n        md5.update(buffer);\n        return Buffer.from(md5.digest(\"binary\"), \"binary\");\n    },\n    _sendHandshakeBody: function() {\n        if (!this._started) return;\n        var signature = this._handshakeSignature();\n        if (!signature) return;\n        this._write(signature);\n        this._stage = 0;\n        this._open();\n        if (this._body.length > this.BODY_SIZE) this.parse(this._body.slice(this.BODY_SIZE));\n    },\n    _parseLeadingByte: function(octet) {\n        if (octet !== 0xFF) return Draft75.prototype._parseLeadingByte.call(this, octet);\n        this._closing = true;\n        this._length = 0;\n        this._stage = 1;\n    }\n};\nfor(var key in instance)Draft76.prototype[key] = instance[key];\nmodule.exports = Draft76;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver/draft76.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver/headers.js":
/*!***********************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver/headers.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("\nvar Headers = function() {\n    this.clear();\n};\nHeaders.prototype.ALLOWED_DUPLICATES = [\n    \"set-cookie\",\n    \"set-cookie2\",\n    \"warning\",\n    \"www-authenticate\"\n];\nHeaders.prototype.clear = function() {\n    this._sent = {};\n    this._lines = [];\n};\nHeaders.prototype.set = function(name, value) {\n    if (value === undefined) return;\n    name = this._strip(name);\n    value = this._strip(value);\n    var key = name.toLowerCase();\n    if (!this._sent.hasOwnProperty(key) || this.ALLOWED_DUPLICATES.indexOf(key) >= 0) {\n        this._sent[key] = true;\n        this._lines.push(name + \": \" + value + \"\\r\\n\");\n    }\n};\nHeaders.prototype.toString = function() {\n    return this._lines.join(\"\");\n};\nHeaders.prototype._strip = function(string) {\n    return string.toString().replace(/^ */, \"\").replace(/ *$/, \"\");\n};\nmodule.exports = Headers;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0LWRyaXZlci9saWIvd2Vic29ja2V0L2RyaXZlci9oZWFkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsVUFBVTtJQUNaLElBQUksQ0FBQ0MsS0FBSztBQUNaO0FBRUFELFFBQVFFLFNBQVMsQ0FBQ0Msa0JBQWtCLEdBQUc7SUFBQztJQUFjO0lBQWU7SUFBVztDQUFtQjtBQUVuR0gsUUFBUUUsU0FBUyxDQUFDRCxLQUFLLEdBQUc7SUFDeEIsSUFBSSxDQUFDRyxLQUFLLEdBQUksQ0FBQztJQUNmLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEVBQUU7QUFDbEI7QUFFQUwsUUFBUUUsU0FBUyxDQUFDSSxHQUFHLEdBQUcsU0FBU0MsSUFBSSxFQUFFQyxLQUFLO0lBQzFDLElBQUlBLFVBQVVDLFdBQVc7SUFFekJGLE9BQU8sSUFBSSxDQUFDRyxNQUFNLENBQUNIO0lBQ25CQyxRQUFRLElBQUksQ0FBQ0UsTUFBTSxDQUFDRjtJQUVwQixJQUFJRyxNQUFNSixLQUFLSyxXQUFXO0lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUNSLEtBQUssQ0FBQ1MsY0FBYyxDQUFDRixRQUFRLElBQUksQ0FBQ1Isa0JBQWtCLENBQUNXLE9BQU8sQ0FBQ0gsUUFBUSxHQUFHO1FBQ2hGLElBQUksQ0FBQ1AsS0FBSyxDQUFDTyxJQUFJLEdBQUc7UUFDbEIsSUFBSSxDQUFDTixNQUFNLENBQUNVLElBQUksQ0FBQ1IsT0FBTyxPQUFPQyxRQUFRO0lBQ3pDO0FBQ0Y7QUFFQVIsUUFBUUUsU0FBUyxDQUFDYyxRQUFRLEdBQUc7SUFDM0IsT0FBTyxJQUFJLENBQUNYLE1BQU0sQ0FBQ1ksSUFBSSxDQUFDO0FBQzFCO0FBRUFqQixRQUFRRSxTQUFTLENBQUNRLE1BQU0sR0FBRyxTQUFTUSxNQUFNO0lBQ3hDLE9BQU9BLE9BQU9GLFFBQVEsR0FBR0csT0FBTyxDQUFDLE9BQU8sSUFBSUEsT0FBTyxDQUFDLE9BQU87QUFDN0Q7QUFFQUMsT0FBT0MsT0FBTyxHQUFHckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95b3Vzc2VmLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy93ZWJzb2NrZXQtZHJpdmVyL2xpYi93ZWJzb2NrZXQvZHJpdmVyL2hlYWRlcnMuanM/NWQ0MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBIZWFkZXJzID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2xlYXIoKTtcbn07XG5cbkhlYWRlcnMucHJvdG90eXBlLkFMTE9XRURfRFVQTElDQVRFUyA9IFsnc2V0LWNvb2tpZScsICdzZXQtY29va2llMicsICd3YXJuaW5nJywgJ3d3dy1hdXRoZW50aWNhdGUnXTtcblxuSGVhZGVycy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fc2VudCAgPSB7fTtcbiAgdGhpcy5fbGluZXMgPSBbXTtcbn07XG5cbkhlYWRlcnMucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgbmFtZSA9IHRoaXMuX3N0cmlwKG5hbWUpO1xuICB2YWx1ZSA9IHRoaXMuX3N0cmlwKHZhbHVlKTtcblxuICB2YXIga2V5ID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICBpZiAoIXRoaXMuX3NlbnQuaGFzT3duUHJvcGVydHkoa2V5KSB8fCB0aGlzLkFMTE9XRURfRFVQTElDQVRFUy5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgIHRoaXMuX3NlbnRba2V5XSA9IHRydWU7XG4gICAgdGhpcy5fbGluZXMucHVzaChuYW1lICsgJzogJyArIHZhbHVlICsgJ1xcclxcbicpO1xuICB9XG59O1xuXG5IZWFkZXJzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fbGluZXMuam9pbignJyk7XG59O1xuXG5IZWFkZXJzLnByb3RvdHlwZS5fc3RyaXAgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50b1N0cmluZygpLnJlcGxhY2UoL14gKi8sICcnKS5yZXBsYWNlKC8gKiQvLCAnJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhlYWRlcnM7XG4iXSwibmFtZXMiOlsiSGVhZGVycyIsImNsZWFyIiwicHJvdG90eXBlIiwiQUxMT1dFRF9EVVBMSUNBVEVTIiwiX3NlbnQiLCJfbGluZXMiLCJzZXQiLCJuYW1lIiwidmFsdWUiLCJ1bmRlZmluZWQiLCJfc3RyaXAiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsImhhc093blByb3BlcnR5IiwiaW5kZXhPZiIsInB1c2giLCJ0b1N0cmluZyIsImpvaW4iLCJzdHJpbmciLCJyZXBsYWNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver/headers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver/hybi.js":
/*!********************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver/hybi.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer), crypto = __webpack_require__(/*! crypto */ \"crypto\"), util = __webpack_require__(/*! util */ \"util\"), Extensions = __webpack_require__(/*! websocket-extensions */ \"(ssr)/./node_modules/websocket-extensions/lib/websocket_extensions.js\"), Base = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/base.js\"), Frame = __webpack_require__(/*! ./hybi/frame */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/hybi/frame.js\"), Message = __webpack_require__(/*! ./hybi/message */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/hybi/message.js\");\nvar Hybi = function(request, url, options) {\n    Base.apply(this, arguments);\n    this._extensions = new Extensions();\n    this._stage = 0;\n    this._masking = this._options.masking;\n    this._protocols = this._options.protocols || [];\n    this._requireMasking = this._options.requireMasking;\n    this._pingCallbacks = {};\n    if (typeof this._protocols === \"string\") this._protocols = this._protocols.split(/ *, */);\n    if (!this._request) return;\n    var protos = this._request.headers[\"sec-websocket-protocol\"], supported = this._protocols;\n    if (protos !== undefined) {\n        if (typeof protos === \"string\") protos = protos.split(/ *, */);\n        this.protocol = protos.filter(function(p) {\n            return supported.indexOf(p) >= 0;\n        })[0];\n    }\n    this.version = \"hybi-\" + Hybi.VERSION;\n};\nutil.inherits(Hybi, Base);\nHybi.VERSION = \"13\";\nHybi.mask = function(payload, mask, offset) {\n    if (!mask || mask.length === 0) return payload;\n    offset = offset || 0;\n    for(var i = 0, n = payload.length - offset; i < n; i++){\n        payload[offset + i] = payload[offset + i] ^ mask[i % 4];\n    }\n    return payload;\n};\nHybi.generateAccept = function(key) {\n    var sha1 = crypto.createHash(\"sha1\");\n    sha1.update(key + Hybi.GUID);\n    return sha1.digest(\"base64\");\n};\nHybi.GUID = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\nvar instance = {\n    FIN: 0x80,\n    MASK: 0x80,\n    RSV1: 0x40,\n    RSV2: 0x20,\n    RSV3: 0x10,\n    OPCODE: 0x0F,\n    LENGTH: 0x7F,\n    OPCODES: {\n        continuation: 0,\n        text: 1,\n        binary: 2,\n        close: 8,\n        ping: 9,\n        pong: 10\n    },\n    OPCODE_CODES: [\n        0,\n        1,\n        2,\n        8,\n        9,\n        10\n    ],\n    MESSAGE_OPCODES: [\n        0,\n        1,\n        2\n    ],\n    OPENING_OPCODES: [\n        1,\n        2\n    ],\n    ERRORS: {\n        normal_closure: 1000,\n        going_away: 1001,\n        protocol_error: 1002,\n        unacceptable: 1003,\n        encoding_error: 1007,\n        policy_violation: 1008,\n        too_large: 1009,\n        extension_error: 1010,\n        unexpected_condition: 1011\n    },\n    ERROR_CODES: [\n        1000,\n        1001,\n        1002,\n        1003,\n        1007,\n        1008,\n        1009,\n        1010,\n        1011\n    ],\n    DEFAULT_ERROR_CODE: 1000,\n    MIN_RESERVED_ERROR: 3000,\n    MAX_RESERVED_ERROR: 4999,\n    // http://www.w3.org/International/questions/qa-forms-utf-8.en.php\n    UTF8_MATCH: /^([\\x00-\\x7F]|[\\xC2-\\xDF][\\x80-\\xBF]|\\xE0[\\xA0-\\xBF][\\x80-\\xBF]|[\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2}|\\xED[\\x80-\\x9F][\\x80-\\xBF]|\\xF0[\\x90-\\xBF][\\x80-\\xBF]{2}|[\\xF1-\\xF3][\\x80-\\xBF]{3}|\\xF4[\\x80-\\x8F][\\x80-\\xBF]{2})*$/,\n    addExtension: function(extension) {\n        this._extensions.add(extension);\n        return true;\n    },\n    parse: function(chunk) {\n        this._reader.put(chunk);\n        var buffer = true;\n        while(buffer){\n            switch(this._stage){\n                case 0:\n                    buffer = this._reader.read(1);\n                    if (buffer) this._parseOpcode(buffer[0]);\n                    break;\n                case 1:\n                    buffer = this._reader.read(1);\n                    if (buffer) this._parseLength(buffer[0]);\n                    break;\n                case 2:\n                    buffer = this._reader.read(this._frame.lengthBytes);\n                    if (buffer) this._parseExtendedLength(buffer);\n                    break;\n                case 3:\n                    buffer = this._reader.read(4);\n                    if (buffer) {\n                        this._stage = 4;\n                        this._frame.maskingKey = buffer;\n                    }\n                    break;\n                case 4:\n                    buffer = this._reader.read(this._frame.length);\n                    if (buffer) {\n                        this._stage = 0;\n                        this._emitFrame(buffer);\n                    }\n                    break;\n                default:\n                    buffer = null;\n            }\n        }\n    },\n    text: function(message) {\n        if (this.readyState > 1) return false;\n        return this.frame(message, \"text\");\n    },\n    binary: function(message) {\n        if (this.readyState > 1) return false;\n        return this.frame(message, \"binary\");\n    },\n    ping: function(message, callback) {\n        if (this.readyState > 1) return false;\n        message = message || \"\";\n        if (callback) this._pingCallbacks[message] = callback;\n        return this.frame(message, \"ping\");\n    },\n    pong: function(message) {\n        if (this.readyState > 1) return false;\n        message = message || \"\";\n        return this.frame(message, \"pong\");\n    },\n    close: function(reason, code) {\n        reason = reason || \"\";\n        code = code || this.ERRORS.normal_closure;\n        if (this.readyState <= 0) {\n            this.readyState = 3;\n            this.emit(\"close\", new Base.CloseEvent(code, reason));\n            return true;\n        } else if (this.readyState === 1) {\n            this.readyState = 2;\n            this._extensions.close(function() {\n                this.frame(reason, \"close\", code);\n            }, this);\n            return true;\n        } else {\n            return false;\n        }\n    },\n    frame: function(buffer, type, code) {\n        if (this.readyState <= 0) return this._queue([\n            buffer,\n            type,\n            code\n        ]);\n        if (this.readyState > 2) return false;\n        if (buffer instanceof Array) buffer = Buffer.from(buffer);\n        if (typeof buffer === \"number\") buffer = buffer.toString();\n        var message = new Message(), isText = typeof buffer === \"string\", payload, copy;\n        message.rsv1 = message.rsv2 = message.rsv3 = false;\n        message.opcode = this.OPCODES[type || (isText ? \"text\" : \"binary\")];\n        payload = isText ? Buffer.from(buffer, \"utf8\") : buffer;\n        if (code) {\n            copy = payload;\n            payload = Buffer.allocUnsafe(2 + copy.length);\n            payload.writeUInt16BE(code, 0);\n            copy.copy(payload, 2);\n        }\n        message.data = payload;\n        var onMessageReady = function(message) {\n            var frame = new Frame();\n            frame.final = true;\n            frame.rsv1 = message.rsv1;\n            frame.rsv2 = message.rsv2;\n            frame.rsv3 = message.rsv3;\n            frame.opcode = message.opcode;\n            frame.masked = !!this._masking;\n            frame.length = message.data.length;\n            frame.payload = message.data;\n            if (frame.masked) frame.maskingKey = crypto.randomBytes(4);\n            this._sendFrame(frame);\n        };\n        if (this.MESSAGE_OPCODES.indexOf(message.opcode) >= 0) this._extensions.processOutgoingMessage(message, function(error, message) {\n            if (error) return this._fail(\"extension_error\", error.message);\n            onMessageReady.call(this, message);\n        }, this);\n        else onMessageReady.call(this, message);\n        return true;\n    },\n    _sendFrame: function(frame) {\n        var length = frame.length, header = length <= 125 ? 2 : length <= 65535 ? 4 : 10, offset = header + (frame.masked ? 4 : 0), buffer = Buffer.allocUnsafe(offset + length), masked = frame.masked ? this.MASK : 0;\n        buffer[0] = (frame.final ? this.FIN : 0) | (frame.rsv1 ? this.RSV1 : 0) | (frame.rsv2 ? this.RSV2 : 0) | (frame.rsv3 ? this.RSV3 : 0) | frame.opcode;\n        if (length <= 125) {\n            buffer[1] = masked | length;\n        } else if (length <= 65535) {\n            buffer[1] = masked | 126;\n            buffer.writeUInt16BE(length, 2);\n        } else {\n            buffer[1] = masked | 127;\n            buffer.writeUInt32BE(Math.floor(length / 0x100000000), 2);\n            buffer.writeUInt32BE(length % 0x100000000, 6);\n        }\n        frame.payload.copy(buffer, offset);\n        if (frame.masked) {\n            frame.maskingKey.copy(buffer, header);\n            Hybi.mask(buffer, frame.maskingKey, offset);\n        }\n        this._write(buffer);\n    },\n    _handshakeResponse: function() {\n        var secKey = this._request.headers[\"sec-websocket-key\"], version = this._request.headers[\"sec-websocket-version\"];\n        if (version !== Hybi.VERSION) throw new Error(\"Unsupported WebSocket version: \" + version);\n        if (typeof secKey !== \"string\") throw new Error(\"Missing handshake request header: Sec-WebSocket-Key\");\n        this._headers.set(\"Upgrade\", \"websocket\");\n        this._headers.set(\"Connection\", \"Upgrade\");\n        this._headers.set(\"Sec-WebSocket-Accept\", Hybi.generateAccept(secKey));\n        if (this.protocol) this._headers.set(\"Sec-WebSocket-Protocol\", this.protocol);\n        var extensions = this._extensions.generateResponse(this._request.headers[\"sec-websocket-extensions\"]);\n        if (extensions) this._headers.set(\"Sec-WebSocket-Extensions\", extensions);\n        var start = \"HTTP/1.1 101 Switching Protocols\", headers = [\n            start,\n            this._headers.toString(),\n            \"\"\n        ];\n        return Buffer.from(headers.join(\"\\r\\n\"), \"utf8\");\n    },\n    _shutdown: function(code, reason, error) {\n        delete this._frame;\n        delete this._message;\n        this._stage = 5;\n        var sendCloseFrame = this.readyState === 1;\n        this.readyState = 2;\n        this._extensions.close(function() {\n            if (sendCloseFrame) this.frame(reason, \"close\", code);\n            this.readyState = 3;\n            if (error) this.emit(\"error\", new Error(reason));\n            this.emit(\"close\", new Base.CloseEvent(code, reason));\n        }, this);\n    },\n    _fail: function(type, message) {\n        if (this.readyState > 1) return;\n        this._shutdown(this.ERRORS[type], message, true);\n    },\n    _parseOpcode: function(octet) {\n        var rsvs = [\n            this.RSV1,\n            this.RSV2,\n            this.RSV3\n        ].map(function(rsv) {\n            return (octet & rsv) === rsv;\n        });\n        var frame = this._frame = new Frame();\n        frame.final = (octet & this.FIN) === this.FIN;\n        frame.rsv1 = rsvs[0];\n        frame.rsv2 = rsvs[1];\n        frame.rsv3 = rsvs[2];\n        frame.opcode = octet & this.OPCODE;\n        this._stage = 1;\n        if (!this._extensions.validFrameRsv(frame)) return this._fail(\"protocol_error\", \"One or more reserved bits are on: reserved1 = \" + (frame.rsv1 ? 1 : 0) + \", reserved2 = \" + (frame.rsv2 ? 1 : 0) + \", reserved3 = \" + (frame.rsv3 ? 1 : 0));\n        if (this.OPCODE_CODES.indexOf(frame.opcode) < 0) return this._fail(\"protocol_error\", \"Unrecognized frame opcode: \" + frame.opcode);\n        if (this.MESSAGE_OPCODES.indexOf(frame.opcode) < 0 && !frame.final) return this._fail(\"protocol_error\", \"Received fragmented control frame: opcode = \" + frame.opcode);\n        if (this._message && this.OPENING_OPCODES.indexOf(frame.opcode) >= 0) return this._fail(\"protocol_error\", \"Received new data frame but previous continuous frame is unfinished\");\n    },\n    _parseLength: function(octet) {\n        var frame = this._frame;\n        frame.masked = (octet & this.MASK) === this.MASK;\n        frame.length = octet & this.LENGTH;\n        if (frame.length >= 0 && frame.length <= 125) {\n            this._stage = frame.masked ? 3 : 4;\n            if (!this._checkFrameLength()) return;\n        } else {\n            this._stage = 2;\n            frame.lengthBytes = frame.length === 126 ? 2 : 8;\n        }\n        if (this._requireMasking && !frame.masked) return this._fail(\"unacceptable\", \"Received unmasked frame but masking is required\");\n    },\n    _parseExtendedLength: function(buffer) {\n        var frame = this._frame;\n        frame.length = this._readUInt(buffer);\n        this._stage = frame.masked ? 3 : 4;\n        if (this.MESSAGE_OPCODES.indexOf(frame.opcode) < 0 && frame.length > 125) return this._fail(\"protocol_error\", \"Received control frame having too long payload: \" + frame.length);\n        if (!this._checkFrameLength()) return;\n    },\n    _checkFrameLength: function() {\n        var length = this._message ? this._message.length : 0;\n        if (length + this._frame.length > this._maxLength) {\n            this._fail(\"too_large\", \"WebSocket frame length too large\");\n            return false;\n        } else {\n            return true;\n        }\n    },\n    _emitFrame: function(buffer) {\n        var frame = this._frame, payload = frame.payload = Hybi.mask(buffer, frame.maskingKey), opcode = frame.opcode, message, code, reason, callbacks, callback;\n        delete this._frame;\n        if (opcode === this.OPCODES.continuation) {\n            if (!this._message) return this._fail(\"protocol_error\", \"Received unexpected continuation frame\");\n            this._message.pushFrame(frame);\n        }\n        if (opcode === this.OPCODES.text || opcode === this.OPCODES.binary) {\n            this._message = new Message();\n            this._message.pushFrame(frame);\n        }\n        if (frame.final && this.MESSAGE_OPCODES.indexOf(opcode) >= 0) return this._emitMessage(this._message);\n        if (opcode === this.OPCODES.close) {\n            code = payload.length >= 2 ? payload.readUInt16BE(0) : null;\n            reason = payload.length > 2 ? this._encode(payload.slice(2)) : null;\n            if (!(payload.length === 0) && !(code !== null && code >= this.MIN_RESERVED_ERROR && code <= this.MAX_RESERVED_ERROR) && this.ERROR_CODES.indexOf(code) < 0) code = this.ERRORS.protocol_error;\n            if (payload.length > 125 || payload.length > 2 && !reason) code = this.ERRORS.protocol_error;\n            this._shutdown(code || this.DEFAULT_ERROR_CODE, reason || \"\");\n        }\n        if (opcode === this.OPCODES.ping) {\n            this.frame(payload, \"pong\");\n            this.emit(\"ping\", new Base.PingEvent(payload.toString()));\n        }\n        if (opcode === this.OPCODES.pong) {\n            callbacks = this._pingCallbacks;\n            message = this._encode(payload);\n            callback = callbacks[message];\n            delete callbacks[message];\n            if (callback) callback();\n            this.emit(\"pong\", new Base.PongEvent(payload.toString()));\n        }\n    },\n    _emitMessage: function(message) {\n        var message = this._message;\n        message.read();\n        delete this._message;\n        this._extensions.processIncomingMessage(message, function(error, message) {\n            if (error) return this._fail(\"extension_error\", error.message);\n            var payload = message.data;\n            if (message.opcode === this.OPCODES.text) payload = this._encode(payload);\n            if (payload === null) return this._fail(\"encoding_error\", \"Could not decode a text frame as UTF-8\");\n            else this.emit(\"message\", new Base.MessageEvent(payload));\n        }, this);\n    },\n    _encode: function(buffer) {\n        try {\n            var string = buffer.toString(\"binary\", 0, buffer.length);\n            if (!this.UTF8_MATCH.test(string)) return null;\n        } catch (e) {}\n        return buffer.toString(\"utf8\", 0, buffer.length);\n    },\n    _readUInt: function(buffer) {\n        if (buffer.length === 2) return buffer.readUInt16BE(0);\n        return buffer.readUInt32BE(0) * 0x100000000 + buffer.readUInt32BE(4);\n    }\n};\nfor(var key in instance)Hybi.prototype[key] = instance[key];\nmodule.exports = Hybi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver/hybi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver/hybi/frame.js":
/*!**************************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver/hybi/frame.js ***!
  \**************************************************************************/
/***/ ((module) => {

eval("\nvar Frame = function() {};\nvar instance = {\n    final: false,\n    rsv1: false,\n    rsv2: false,\n    rsv3: false,\n    opcode: null,\n    masked: false,\n    maskingKey: null,\n    lengthBytes: 1,\n    length: 0,\n    payload: null\n};\nfor(var key in instance)Frame.prototype[key] = instance[key];\nmodule.exports = Frame;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0LWRyaXZlci9saWIvd2Vic29ja2V0L2RyaXZlci9oeWJpL2ZyYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsUUFBUSxZQUFZO0FBRXhCLElBQUlDLFdBQVc7SUFDYkMsT0FBYztJQUNkQyxNQUFjO0lBQ2RDLE1BQWM7SUFDZEMsTUFBYztJQUNkQyxRQUFjO0lBQ2RDLFFBQWM7SUFDZEMsWUFBYztJQUNkQyxhQUFjO0lBQ2RDLFFBQWM7SUFDZEMsU0FBYztBQUNoQjtBQUVBLElBQUssSUFBSUMsT0FBT1gsU0FDZEQsTUFBTWEsU0FBUyxDQUFDRCxJQUFJLEdBQUdYLFFBQVEsQ0FBQ1csSUFBSTtBQUV0Q0UsT0FBT0MsT0FBTyxHQUFHZiIsInNvdXJjZXMiOlsid2VicGFjazovL3lvdXNzZWYtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC1kcml2ZXIvbGliL3dlYnNvY2tldC9kcml2ZXIvaHliaS9mcmFtZS5qcz80MzM1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEZyYW1lID0gZnVuY3Rpb24oKSB7fTtcblxudmFyIGluc3RhbmNlID0ge1xuICBmaW5hbDogICAgICAgIGZhbHNlLFxuICByc3YxOiAgICAgICAgIGZhbHNlLFxuICByc3YyOiAgICAgICAgIGZhbHNlLFxuICByc3YzOiAgICAgICAgIGZhbHNlLFxuICBvcGNvZGU6ICAgICAgIG51bGwsXG4gIG1hc2tlZDogICAgICAgZmFsc2UsXG4gIG1hc2tpbmdLZXk6ICAgbnVsbCxcbiAgbGVuZ3RoQnl0ZXM6ICAxLFxuICBsZW5ndGg6ICAgICAgIDAsXG4gIHBheWxvYWQ6ICAgICAgbnVsbFxufTtcblxuZm9yICh2YXIga2V5IGluIGluc3RhbmNlKVxuICBGcmFtZS5wcm90b3R5cGVba2V5XSA9IGluc3RhbmNlW2tleV07XG5cbm1vZHVsZS5leHBvcnRzID0gRnJhbWU7XG4iXSwibmFtZXMiOlsiRnJhbWUiLCJpbnN0YW5jZSIsImZpbmFsIiwicnN2MSIsInJzdjIiLCJyc3YzIiwib3Bjb2RlIiwibWFza2VkIiwibWFza2luZ0tleSIsImxlbmd0aEJ5dGVzIiwibGVuZ3RoIiwicGF5bG9hZCIsImtleSIsInByb3RvdHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver/hybi/frame.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver/hybi/message.js":
/*!****************************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver/hybi/message.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer);\nvar Message = function() {\n    this.rsv1 = false;\n    this.rsv2 = false;\n    this.rsv3 = false;\n    this.opcode = null;\n    this.length = 0;\n    this._chunks = [];\n};\nvar instance = {\n    read: function() {\n        return this.data = this.data || Buffer.concat(this._chunks, this.length);\n    },\n    pushFrame: function(frame) {\n        this.rsv1 = this.rsv1 || frame.rsv1;\n        this.rsv2 = this.rsv2 || frame.rsv2;\n        this.rsv3 = this.rsv3 || frame.rsv3;\n        if (this.opcode === null) this.opcode = frame.opcode;\n        this._chunks.push(frame.payload);\n        this.length += frame.length;\n    }\n};\nfor(var key in instance)Message.prototype[key] = instance[key];\nmodule.exports = Message;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0LWRyaXZlci9saWIvd2Vic29ja2V0L2RyaXZlci9oeWJpL21lc3NhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxTQUFTQyw0RkFBNkI7QUFFMUMsSUFBSUMsVUFBVTtJQUNaLElBQUksQ0FBQ0MsSUFBSSxHQUFNO0lBQ2YsSUFBSSxDQUFDQyxJQUFJLEdBQU07SUFDZixJQUFJLENBQUNDLElBQUksR0FBTTtJQUNmLElBQUksQ0FBQ0MsTUFBTSxHQUFJO0lBQ2YsSUFBSSxDQUFDQyxNQUFNLEdBQUk7SUFDZixJQUFJLENBQUNDLE9BQU8sR0FBRyxFQUFFO0FBQ25CO0FBRUEsSUFBSUMsV0FBVztJQUNiQyxNQUFNO1FBQ0osT0FBTyxJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUksSUFBSVgsT0FBT1ksTUFBTSxDQUFDLElBQUksQ0FBQ0osT0FBTyxFQUFFLElBQUksQ0FBQ0QsTUFBTTtJQUN6RTtJQUVBTSxXQUFXLFNBQVNDLEtBQUs7UUFDdkIsSUFBSSxDQUFDWCxJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJLElBQUlXLE1BQU1YLElBQUk7UUFDbkMsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJLElBQUlVLE1BQU1WLElBQUk7UUFDbkMsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSSxDQUFDQSxJQUFJLElBQUlTLE1BQU1ULElBQUk7UUFFbkMsSUFBSSxJQUFJLENBQUNDLE1BQU0sS0FBSyxNQUFNLElBQUksQ0FBQ0EsTUFBTSxHQUFHUSxNQUFNUixNQUFNO1FBRXBELElBQUksQ0FBQ0UsT0FBTyxDQUFDTyxJQUFJLENBQUNELE1BQU1FLE9BQU87UUFDL0IsSUFBSSxDQUFDVCxNQUFNLElBQUlPLE1BQU1QLE1BQU07SUFDN0I7QUFDRjtBQUVBLElBQUssSUFBSVUsT0FBT1IsU0FDZFAsUUFBUWdCLFNBQVMsQ0FBQ0QsSUFBSSxHQUFHUixRQUFRLENBQUNRLElBQUk7QUFFeENFLE9BQU9DLE9BQU8sR0FBR2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veW91c3NlZi1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0LWRyaXZlci9saWIvd2Vic29ja2V0L2RyaXZlci9oeWJpL21lc3NhZ2UuanM/ZGI4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIE1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5yc3YxICAgID0gZmFsc2U7XG4gIHRoaXMucnN2MiAgICA9IGZhbHNlO1xuICB0aGlzLnJzdjMgICAgPSBmYWxzZTtcbiAgdGhpcy5vcGNvZGUgID0gbnVsbDtcbiAgdGhpcy5sZW5ndGggID0gMDtcbiAgdGhpcy5fY2h1bmtzID0gW107XG59O1xuXG52YXIgaW5zdGFuY2UgPSB7XG4gIHJlYWQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEgPSB0aGlzLmRhdGEgfHwgQnVmZmVyLmNvbmNhdCh0aGlzLl9jaHVua3MsIHRoaXMubGVuZ3RoKTtcbiAgfSxcblxuICBwdXNoRnJhbWU6IGZ1bmN0aW9uKGZyYW1lKSB7XG4gICAgdGhpcy5yc3YxID0gdGhpcy5yc3YxIHx8IGZyYW1lLnJzdjE7XG4gICAgdGhpcy5yc3YyID0gdGhpcy5yc3YyIHx8IGZyYW1lLnJzdjI7XG4gICAgdGhpcy5yc3YzID0gdGhpcy5yc3YzIHx8IGZyYW1lLnJzdjM7XG5cbiAgICBpZiAodGhpcy5vcGNvZGUgPT09IG51bGwpIHRoaXMub3Bjb2RlID0gZnJhbWUub3Bjb2RlO1xuXG4gICAgdGhpcy5fY2h1bmtzLnB1c2goZnJhbWUucGF5bG9hZCk7XG4gICAgdGhpcy5sZW5ndGggKz0gZnJhbWUubGVuZ3RoO1xuICB9XG59O1xuXG5mb3IgKHZhciBrZXkgaW4gaW5zdGFuY2UpXG4gIE1lc3NhZ2UucHJvdG90eXBlW2tleV0gPSBpbnN0YW5jZVtrZXldO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc3NhZ2U7XG4iXSwibmFtZXMiOlsiQnVmZmVyIiwicmVxdWlyZSIsIk1lc3NhZ2UiLCJyc3YxIiwicnN2MiIsInJzdjMiLCJvcGNvZGUiLCJsZW5ndGgiLCJfY2h1bmtzIiwiaW5zdGFuY2UiLCJyZWFkIiwiZGF0YSIsImNvbmNhdCIsInB1c2hGcmFtZSIsImZyYW1lIiwicHVzaCIsInBheWxvYWQiLCJrZXkiLCJwcm90b3R5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver/hybi/message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver/proxy.js":
/*!*********************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver/proxy.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer), Stream = (__webpack_require__(/*! stream */ \"stream\").Stream), url = __webpack_require__(/*! url */ \"url\"), util = __webpack_require__(/*! util */ \"util\"), Base = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/base.js\"), Headers = __webpack_require__(/*! ./headers */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/headers.js\"), HttpParser = __webpack_require__(/*! ../http_parser */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/http_parser.js\");\nvar PORTS = {\n    \"ws:\": 80,\n    \"wss:\": 443\n};\nvar Proxy = function(client, origin, options) {\n    this._client = client;\n    this._http = new HttpParser(\"response\");\n    this._origin = typeof client.url === \"object\" ? client.url : url.parse(client.url);\n    this._url = typeof origin === \"object\" ? origin : url.parse(origin);\n    this._options = options || {};\n    this._state = 0;\n    this.readable = this.writable = true;\n    this._paused = false;\n    this._headers = new Headers();\n    this._headers.set(\"Host\", this._origin.host);\n    this._headers.set(\"Connection\", \"keep-alive\");\n    this._headers.set(\"Proxy-Connection\", \"keep-alive\");\n    var auth = this._url.auth && Buffer.from(this._url.auth, \"utf8\").toString(\"base64\");\n    if (auth) this._headers.set(\"Proxy-Authorization\", \"Basic \" + auth);\n};\nutil.inherits(Proxy, Stream);\nvar instance = {\n    setHeader: function(name, value) {\n        if (this._state !== 0) return false;\n        this._headers.set(name, value);\n        return true;\n    },\n    start: function() {\n        if (this._state !== 0) return false;\n        this._state = 1;\n        var origin = this._origin, port = origin.port || PORTS[origin.protocol], start = \"CONNECT \" + origin.hostname + \":\" + port + \" HTTP/1.1\";\n        var headers = [\n            start,\n            this._headers.toString(),\n            \"\"\n        ];\n        this.emit(\"data\", Buffer.from(headers.join(\"\\r\\n\"), \"utf8\"));\n        return true;\n    },\n    pause: function() {\n        this._paused = true;\n    },\n    resume: function() {\n        this._paused = false;\n        this.emit(\"drain\");\n    },\n    write: function(chunk) {\n        if (!this.writable) return false;\n        this._http.parse(chunk);\n        if (!this._http.isComplete()) return !this._paused;\n        this.statusCode = this._http.statusCode;\n        this.headers = this._http.headers;\n        if (this.statusCode === 200) {\n            this.emit(\"connect\", new Base.ConnectEvent());\n        } else {\n            var message = \"Can't establish a connection to the server at \" + this._origin.href;\n            this.emit(\"error\", new Error(message));\n        }\n        this.end();\n        return !this._paused;\n    },\n    end: function(chunk) {\n        if (!this.writable) return;\n        if (chunk !== undefined) this.write(chunk);\n        this.readable = this.writable = false;\n        this.emit(\"close\");\n        this.emit(\"end\");\n    },\n    destroy: function() {\n        this.end();\n    }\n};\nfor(var key in instance)Proxy.prototype[key] = instance[key];\nmodule.exports = Proxy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver/proxy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver/server.js":
/*!**********************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver/server.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar util = __webpack_require__(/*! util */ \"util\"), HttpParser = __webpack_require__(/*! ../http_parser */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/http_parser.js\"), Base = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/base.js\"), Draft75 = __webpack_require__(/*! ./draft75 */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/draft75.js\"), Draft76 = __webpack_require__(/*! ./draft76 */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/draft76.js\"), Hybi = __webpack_require__(/*! ./hybi */ \"(ssr)/./node_modules/websocket-driver/lib/websocket/driver/hybi.js\");\nvar Server = function(options) {\n    Base.call(this, null, null, options);\n    this._http = new HttpParser(\"request\");\n};\nutil.inherits(Server, Base);\nvar instance = {\n    EVENTS: [\n        \"open\",\n        \"message\",\n        \"error\",\n        \"close\",\n        \"ping\",\n        \"pong\"\n    ],\n    _bindEventListeners: function() {\n        this.messages.on(\"error\", function() {});\n        this.on(\"error\", function() {});\n    },\n    parse: function(chunk) {\n        if (this._delegate) return this._delegate.parse(chunk);\n        this._http.parse(chunk);\n        if (!this._http.isComplete()) return;\n        this.method = this._http.method;\n        this.url = this._http.url;\n        this.headers = this._http.headers;\n        this.body = this._http.body;\n        var self = this;\n        this._delegate = Server.http(this, this._options);\n        this._delegate.messages = this.messages;\n        this._delegate.io = this.io;\n        this._open();\n        this.EVENTS.forEach(function(event) {\n            this._delegate.on(event, function(e) {\n                self.emit(event, e);\n            });\n        }, this);\n        this.protocol = this._delegate.protocol;\n        this.version = this._delegate.version;\n        this.parse(this._http.body);\n        this.emit(\"connect\", new Base.ConnectEvent());\n    },\n    _open: function() {\n        this.__queue.forEach(function(msg) {\n            this._delegate[msg[0]].apply(this._delegate, msg[1]);\n        }, this);\n        this.__queue = [];\n    }\n};\n[\n    \"addExtension\",\n    \"setHeader\",\n    \"start\",\n    \"frame\",\n    \"text\",\n    \"binary\",\n    \"ping\",\n    \"close\"\n].forEach(function(method) {\n    instance[method] = function() {\n        if (this._delegate) {\n            return this._delegate[method].apply(this._delegate, arguments);\n        } else {\n            this.__queue.push([\n                method,\n                arguments\n            ]);\n            return true;\n        }\n    };\n});\nfor(var key in instance)Server.prototype[key] = instance[key];\nServer.isSecureRequest = function(request) {\n    if (request.connection && request.connection.authorized !== undefined) return true;\n    if (request.socket && request.socket.secure) return true;\n    var headers = request.headers;\n    if (!headers) return false;\n    if (headers[\"https\"] === \"on\") return true;\n    if (headers[\"x-forwarded-ssl\"] === \"on\") return true;\n    if (headers[\"x-forwarded-scheme\"] === \"https\") return true;\n    if (headers[\"x-forwarded-proto\"] === \"https\") return true;\n    return false;\n};\nServer.determineUrl = function(request) {\n    var scheme = this.isSecureRequest(request) ? \"wss:\" : \"ws:\";\n    return scheme + \"//\" + request.headers.host + request.url;\n};\nServer.http = function(request, options) {\n    options = options || {};\n    if (options.requireMasking === undefined) options.requireMasking = true;\n    var headers = request.headers, version = headers[\"sec-websocket-version\"], key = headers[\"sec-websocket-key\"], key1 = headers[\"sec-websocket-key1\"], key2 = headers[\"sec-websocket-key2\"], url = this.determineUrl(request);\n    if (version || key) return new Hybi(request, url, options);\n    else if (key1 || key2) return new Draft76(request, url, options);\n    else return new Draft75(request, url, options);\n};\nmodule.exports = Server;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/driver/stream_reader.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/driver/stream_reader.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer);\nvar StreamReader = function() {\n    this._queue = [];\n    this._queueSize = 0;\n    this._offset = 0;\n};\nStreamReader.prototype.put = function(buffer) {\n    if (!buffer || buffer.length === 0) return;\n    if (!Buffer.isBuffer(buffer)) buffer = Buffer.from(buffer);\n    this._queue.push(buffer);\n    this._queueSize += buffer.length;\n};\nStreamReader.prototype.read = function(length) {\n    if (length > this._queueSize) return null;\n    if (length === 0) return Buffer.alloc(0);\n    this._queueSize -= length;\n    var queue = this._queue, remain = length, first = queue[0], buffers, buffer;\n    if (first.length >= length) {\n        if (first.length === length) {\n            return queue.shift();\n        } else {\n            buffer = first.slice(0, length);\n            queue[0] = first.slice(length);\n            return buffer;\n        }\n    }\n    for(var i = 0, n = queue.length; i < n; i++){\n        if (remain < queue[i].length) break;\n        remain -= queue[i].length;\n    }\n    buffers = queue.splice(0, i);\n    if (remain > 0 && queue.length > 0) {\n        buffers.push(queue[0].slice(0, remain));\n        queue[0] = queue[0].slice(remain);\n    }\n    return Buffer.concat(buffers, length);\n};\nStreamReader.prototype.eachByte = function(callback, context) {\n    var buffer, n, index;\n    while(this._queue.length > 0){\n        buffer = this._queue[0];\n        n = buffer.length;\n        while(this._offset < n){\n            index = this._offset;\n            this._offset += 1;\n            callback.call(context, buffer[index]);\n        }\n        this._offset = 0;\n        this._queue.shift();\n    }\n};\nmodule.exports = StreamReader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0LWRyaXZlci9saWIvd2Vic29ja2V0L2RyaXZlci9zdHJlYW1fcmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsU0FBU0MsNEZBQTZCO0FBRTFDLElBQUlDLGVBQWU7SUFDakIsSUFBSSxDQUFDQyxNQUFNLEdBQU8sRUFBRTtJQUNwQixJQUFJLENBQUNDLFVBQVUsR0FBRztJQUNsQixJQUFJLENBQUNDLE9BQU8sR0FBTTtBQUNwQjtBQUVBSCxhQUFhSSxTQUFTLENBQUNDLEdBQUcsR0FBRyxTQUFTQyxNQUFNO0lBQzFDLElBQUksQ0FBQ0EsVUFBVUEsT0FBT0MsTUFBTSxLQUFLLEdBQUc7SUFDcEMsSUFBSSxDQUFDVCxPQUFPVSxRQUFRLENBQUNGLFNBQVNBLFNBQVNSLE9BQU9XLElBQUksQ0FBQ0g7SUFDbkQsSUFBSSxDQUFDTCxNQUFNLENBQUNTLElBQUksQ0FBQ0o7SUFDakIsSUFBSSxDQUFDSixVQUFVLElBQUlJLE9BQU9DLE1BQU07QUFDbEM7QUFFQVAsYUFBYUksU0FBUyxDQUFDTyxJQUFJLEdBQUcsU0FBU0osTUFBTTtJQUMzQyxJQUFJQSxTQUFTLElBQUksQ0FBQ0wsVUFBVSxFQUFFLE9BQU87SUFDckMsSUFBSUssV0FBVyxHQUFHLE9BQU9ULE9BQU9jLEtBQUssQ0FBQztJQUV0QyxJQUFJLENBQUNWLFVBQVUsSUFBSUs7SUFFbkIsSUFBSU0sUUFBUyxJQUFJLENBQUNaLE1BQU0sRUFDcEJhLFNBQVNQLFFBQ1RRLFFBQVNGLEtBQUssQ0FBQyxFQUFFLEVBQ2pCRyxTQUFTVjtJQUViLElBQUlTLE1BQU1SLE1BQU0sSUFBSUEsUUFBUTtRQUMxQixJQUFJUSxNQUFNUixNQUFNLEtBQUtBLFFBQVE7WUFDM0IsT0FBT00sTUFBTUksS0FBSztRQUNwQixPQUFPO1lBQ0xYLFNBQVNTLE1BQU1HLEtBQUssQ0FBQyxHQUFHWDtZQUN4Qk0sS0FBSyxDQUFDLEVBQUUsR0FBR0UsTUFBTUcsS0FBSyxDQUFDWDtZQUN2QixPQUFPRDtRQUNUO0lBQ0Y7SUFFQSxJQUFLLElBQUlhLElBQUksR0FBR0MsSUFBSVAsTUFBTU4sTUFBTSxFQUFFWSxJQUFJQyxHQUFHRCxJQUFLO1FBQzVDLElBQUlMLFNBQVNELEtBQUssQ0FBQ00sRUFBRSxDQUFDWixNQUFNLEVBQUU7UUFDOUJPLFVBQVVELEtBQUssQ0FBQ00sRUFBRSxDQUFDWixNQUFNO0lBQzNCO0lBQ0FTLFVBQVVILE1BQU1RLE1BQU0sQ0FBQyxHQUFHRjtJQUUxQixJQUFJTCxTQUFTLEtBQUtELE1BQU1OLE1BQU0sR0FBRyxHQUFHO1FBQ2xDUyxRQUFRTixJQUFJLENBQUNHLEtBQUssQ0FBQyxFQUFFLENBQUNLLEtBQUssQ0FBQyxHQUFHSjtRQUMvQkQsS0FBSyxDQUFDLEVBQUUsR0FBR0EsS0FBSyxDQUFDLEVBQUUsQ0FBQ0ssS0FBSyxDQUFDSjtJQUM1QjtJQUNBLE9BQU9oQixPQUFPd0IsTUFBTSxDQUFDTixTQUFTVDtBQUNoQztBQUVBUCxhQUFhSSxTQUFTLENBQUNtQixRQUFRLEdBQUcsU0FBU0MsUUFBUSxFQUFFQyxPQUFPO0lBQzFELElBQUluQixRQUFRYyxHQUFHTTtJQUVmLE1BQU8sSUFBSSxDQUFDekIsTUFBTSxDQUFDTSxNQUFNLEdBQUcsRUFBRztRQUM3QkQsU0FBUyxJQUFJLENBQUNMLE1BQU0sQ0FBQyxFQUFFO1FBQ3ZCbUIsSUFBSWQsT0FBT0MsTUFBTTtRQUVqQixNQUFPLElBQUksQ0FBQ0osT0FBTyxHQUFHaUIsRUFBRztZQUN2Qk0sUUFBUSxJQUFJLENBQUN2QixPQUFPO1lBQ3BCLElBQUksQ0FBQ0EsT0FBTyxJQUFJO1lBQ2hCcUIsU0FBU0csSUFBSSxDQUFDRixTQUFTbkIsTUFBTSxDQUFDb0IsTUFBTTtRQUN0QztRQUNBLElBQUksQ0FBQ3ZCLE9BQU8sR0FBRztRQUNmLElBQUksQ0FBQ0YsTUFBTSxDQUFDZ0IsS0FBSztJQUNuQjtBQUNGO0FBRUFXLE9BQU9DLE9BQU8sR0FBRzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veW91c3NlZi1wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0LWRyaXZlci9saWIvd2Vic29ja2V0L2RyaXZlci9zdHJlYW1fcmVhZGVyLmpzP2FkYmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG5cbnZhciBTdHJlYW1SZWFkZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fcXVldWUgICAgID0gW107XG4gIHRoaXMuX3F1ZXVlU2l6ZSA9IDA7XG4gIHRoaXMuX29mZnNldCAgICA9IDA7XG59O1xuXG5TdHJlYW1SZWFkZXIucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICBpZiAoIWJ1ZmZlciB8fCBidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGJ1ZmZlcik7XG4gIHRoaXMuX3F1ZXVlLnB1c2goYnVmZmVyKTtcbiAgdGhpcy5fcXVldWVTaXplICs9IGJ1ZmZlci5sZW5ndGg7XG59O1xuXG5TdHJlYW1SZWFkZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IHRoaXMuX3F1ZXVlU2l6ZSkgcmV0dXJuIG51bGw7XG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG5cbiAgdGhpcy5fcXVldWVTaXplIC09IGxlbmd0aDtcblxuICB2YXIgcXVldWUgID0gdGhpcy5fcXVldWUsXG4gICAgICByZW1haW4gPSBsZW5ndGgsXG4gICAgICBmaXJzdCAgPSBxdWV1ZVswXSxcbiAgICAgIGJ1ZmZlcnMsIGJ1ZmZlcjtcblxuICBpZiAoZmlyc3QubGVuZ3RoID49IGxlbmd0aCkge1xuICAgIGlmIChmaXJzdC5sZW5ndGggPT09IGxlbmd0aCkge1xuICAgICAgcmV0dXJuIHF1ZXVlLnNoaWZ0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciA9IGZpcnN0LnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgICBxdWV1ZVswXSA9IGZpcnN0LnNsaWNlKGxlbmd0aCk7XG4gICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBuID0gcXVldWUubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgaWYgKHJlbWFpbiA8IHF1ZXVlW2ldLmxlbmd0aCkgYnJlYWs7XG4gICAgcmVtYWluIC09IHF1ZXVlW2ldLmxlbmd0aDtcbiAgfVxuICBidWZmZXJzID0gcXVldWUuc3BsaWNlKDAsIGkpO1xuXG4gIGlmIChyZW1haW4gPiAwICYmIHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICBidWZmZXJzLnB1c2gocXVldWVbMF0uc2xpY2UoMCwgcmVtYWluKSk7XG4gICAgcXVldWVbMF0gPSBxdWV1ZVswXS5zbGljZShyZW1haW4pO1xuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KGJ1ZmZlcnMsIGxlbmd0aCk7XG59O1xuXG5TdHJlYW1SZWFkZXIucHJvdG90eXBlLmVhY2hCeXRlID0gZnVuY3Rpb24oY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgdmFyIGJ1ZmZlciwgbiwgaW5kZXg7XG5cbiAgd2hpbGUgKHRoaXMuX3F1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICBidWZmZXIgPSB0aGlzLl9xdWV1ZVswXTtcbiAgICBuID0gYnVmZmVyLmxlbmd0aDtcblxuICAgIHdoaWxlICh0aGlzLl9vZmZzZXQgPCBuKSB7XG4gICAgICBpbmRleCA9IHRoaXMuX29mZnNldDtcbiAgICAgIHRoaXMuX29mZnNldCArPSAxO1xuICAgICAgY2FsbGJhY2suY2FsbChjb250ZXh0LCBidWZmZXJbaW5kZXhdKTtcbiAgICB9XG4gICAgdGhpcy5fb2Zmc2V0ID0gMDtcbiAgICB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbVJlYWRlcjtcbiJdLCJuYW1lcyI6WyJCdWZmZXIiLCJyZXF1aXJlIiwiU3RyZWFtUmVhZGVyIiwiX3F1ZXVlIiwiX3F1ZXVlU2l6ZSIsIl9vZmZzZXQiLCJwcm90b3R5cGUiLCJwdXQiLCJidWZmZXIiLCJsZW5ndGgiLCJpc0J1ZmZlciIsImZyb20iLCJwdXNoIiwicmVhZCIsImFsbG9jIiwicXVldWUiLCJyZW1haW4iLCJmaXJzdCIsImJ1ZmZlcnMiLCJzaGlmdCIsInNsaWNlIiwiaSIsIm4iLCJzcGxpY2UiLCJjb25jYXQiLCJlYWNoQnl0ZSIsImNhbGxiYWNrIiwiY29udGV4dCIsImluZGV4IiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/driver/stream_reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/http_parser.js":
/*!********************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/http_parser.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar NodeHTTPParser = (__webpack_require__(/*! http-parser-js */ \"(ssr)/./node_modules/http-parser-js/http-parser.js\").HTTPParser), Buffer = (__webpack_require__(/*! safe-buffer */ \"(ssr)/./node_modules/safe-buffer/index.js\").Buffer);\nvar TYPES = {\n    request: NodeHTTPParser.REQUEST || \"request\",\n    response: NodeHTTPParser.RESPONSE || \"response\"\n};\nvar HttpParser = function(type) {\n    this._type = type;\n    this._parser = new NodeHTTPParser(TYPES[type]);\n    this._complete = false;\n    this.headers = {};\n    var current = null, self = this;\n    this._parser.onHeaderField = function(b, start, length) {\n        current = b.toString(\"utf8\", start, start + length).toLowerCase();\n    };\n    this._parser.onHeaderValue = function(b, start, length) {\n        var value = b.toString(\"utf8\", start, start + length);\n        if (self.headers.hasOwnProperty(current)) self.headers[current] += \", \" + value;\n        else self.headers[current] = value;\n    };\n    this._parser.onHeadersComplete = this._parser[NodeHTTPParser.kOnHeadersComplete] = function(majorVersion, minorVersion, headers, method, pathname, statusCode) {\n        var info = arguments[0];\n        if (typeof info === \"object\") {\n            method = info.method;\n            pathname = info.url;\n            statusCode = info.statusCode;\n            headers = info.headers;\n        }\n        self.method = typeof method === \"number\" ? HttpParser.METHODS[method] : method;\n        self.statusCode = statusCode;\n        self.url = pathname;\n        if (!headers) return;\n        for(var i = 0, n = headers.length, key, value; i < n; i += 2){\n            key = headers[i].toLowerCase();\n            value = headers[i + 1];\n            if (self.headers.hasOwnProperty(key)) self.headers[key] += \", \" + value;\n            else self.headers[key] = value;\n        }\n        self._complete = true;\n    };\n};\nHttpParser.METHODS = {\n    0: \"DELETE\",\n    1: \"GET\",\n    2: \"HEAD\",\n    3: \"POST\",\n    4: \"PUT\",\n    5: \"CONNECT\",\n    6: \"OPTIONS\",\n    7: \"TRACE\",\n    8: \"COPY\",\n    9: \"LOCK\",\n    10: \"MKCOL\",\n    11: \"MOVE\",\n    12: \"PROPFIND\",\n    13: \"PROPPATCH\",\n    14: \"SEARCH\",\n    15: \"UNLOCK\",\n    16: \"BIND\",\n    17: \"REBIND\",\n    18: \"UNBIND\",\n    19: \"ACL\",\n    20: \"REPORT\",\n    21: \"MKACTIVITY\",\n    22: \"CHECKOUT\",\n    23: \"MERGE\",\n    24: \"M-SEARCH\",\n    25: \"NOTIFY\",\n    26: \"SUBSCRIBE\",\n    27: \"UNSUBSCRIBE\",\n    28: \"PATCH\",\n    29: \"PURGE\",\n    30: \"MKCALENDAR\",\n    31: \"LINK\",\n    32: \"UNLINK\"\n};\nvar VERSION = process.version ? process.version.match(/[0-9]+/g).map(function(n) {\n    return parseInt(n, 10);\n}) : [];\nif (VERSION[0] === 0 && VERSION[1] === 12) {\n    HttpParser.METHODS[16] = \"REPORT\";\n    HttpParser.METHODS[17] = \"MKACTIVITY\";\n    HttpParser.METHODS[18] = \"CHECKOUT\";\n    HttpParser.METHODS[19] = \"MERGE\";\n    HttpParser.METHODS[20] = \"M-SEARCH\";\n    HttpParser.METHODS[21] = \"NOTIFY\";\n    HttpParser.METHODS[22] = \"SUBSCRIBE\";\n    HttpParser.METHODS[23] = \"UNSUBSCRIBE\";\n    HttpParser.METHODS[24] = \"PATCH\";\n    HttpParser.METHODS[25] = \"PURGE\";\n}\nHttpParser.prototype.isComplete = function() {\n    return this._complete;\n};\nHttpParser.prototype.parse = function(chunk) {\n    var consumed = this._parser.execute(chunk, 0, chunk.length);\n    if (typeof consumed !== \"number\") {\n        this.error = consumed;\n        this._complete = true;\n        return;\n    }\n    if (this._complete) this.body = consumed < chunk.length ? chunk.slice(consumed) : Buffer.alloc(0);\n};\nmodule.exports = HttpParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2Vic29ja2V0LWRyaXZlci9saWIvd2Vic29ja2V0L2h0dHBfcGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsaUJBQWlCQyw0R0FBb0MsRUFDckRFLFNBQWlCRiw0RkFBNkI7QUFFbEQsSUFBSUcsUUFBUTtJQUNWQyxTQUFVTCxlQUFlTSxPQUFPLElBQUs7SUFDckNDLFVBQVVQLGVBQWVRLFFBQVEsSUFBSTtBQUN2QztBQUVBLElBQUlDLGFBQWEsU0FBU0MsSUFBSTtJQUM1QixJQUFJLENBQUNDLEtBQUssR0FBT0Q7SUFDakIsSUFBSSxDQUFDRSxPQUFPLEdBQUssSUFBSVosZUFBZUksS0FBSyxDQUFDTSxLQUFLO0lBQy9DLElBQUksQ0FBQ0csU0FBUyxHQUFHO0lBQ2pCLElBQUksQ0FBQ0MsT0FBTyxHQUFLLENBQUM7SUFFbEIsSUFBSUMsVUFBVSxNQUNWQyxPQUFVLElBQUk7SUFFbEIsSUFBSSxDQUFDSixPQUFPLENBQUNLLGFBQWEsR0FBRyxTQUFTQyxDQUFDLEVBQUVDLEtBQUssRUFBRUMsTUFBTTtRQUNwREwsVUFBVUcsRUFBRUcsUUFBUSxDQUFDLFFBQVFGLE9BQU9BLFFBQVFDLFFBQVFFLFdBQVc7SUFDakU7SUFFQSxJQUFJLENBQUNWLE9BQU8sQ0FBQ1csYUFBYSxHQUFHLFNBQVNMLENBQUMsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO1FBQ3BELElBQUlJLFFBQVFOLEVBQUVHLFFBQVEsQ0FBQyxRQUFRRixPQUFPQSxRQUFRQztRQUU5QyxJQUFJSixLQUFLRixPQUFPLENBQUNXLGNBQWMsQ0FBQ1YsVUFDOUJDLEtBQUtGLE9BQU8sQ0FBQ0MsUUFBUSxJQUFJLE9BQU9TO2FBRWhDUixLQUFLRixPQUFPLENBQUNDLFFBQVEsR0FBR1M7SUFDNUI7SUFFQSxJQUFJLENBQUNaLE9BQU8sQ0FBQ2MsaUJBQWlCLEdBQUcsSUFBSSxDQUFDZCxPQUFPLENBQUNaLGVBQWUyQixrQkFBa0IsQ0FBQyxHQUNoRixTQUFTQyxZQUFZLEVBQUVDLFlBQVksRUFBRWYsT0FBTyxFQUFFZ0IsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFVBQVU7UUFDeEUsSUFBSUMsT0FBT0MsU0FBUyxDQUFDLEVBQUU7UUFFdkIsSUFBSSxPQUFPRCxTQUFTLFVBQVU7WUFDNUJILFNBQWFHLEtBQUtILE1BQU07WUFDeEJDLFdBQWFFLEtBQUtFLEdBQUc7WUFDckJILGFBQWFDLEtBQUtELFVBQVU7WUFDNUJsQixVQUFhbUIsS0FBS25CLE9BQU87UUFDM0I7UUFFQUUsS0FBS2MsTUFBTSxHQUFPLE9BQVFBLFdBQVcsV0FBWXJCLFdBQVcyQixPQUFPLENBQUNOLE9BQU8sR0FBR0E7UUFDOUVkLEtBQUtnQixVQUFVLEdBQUdBO1FBQ2xCaEIsS0FBS21CLEdBQUcsR0FBVUo7UUFFbEIsSUFBSSxDQUFDakIsU0FBUztRQUVkLElBQUssSUFBSXVCLElBQUksR0FBR0MsSUFBSXhCLFFBQVFNLE1BQU0sRUFBRW1CLEtBQUtmLE9BQU9hLElBQUlDLEdBQUdELEtBQUssRUFBRztZQUM3REUsTUFBUXpCLE9BQU8sQ0FBQ3VCLEVBQUUsQ0FBQ2YsV0FBVztZQUM5QkUsUUFBUVYsT0FBTyxDQUFDdUIsSUFBRSxFQUFFO1lBQ3BCLElBQUlyQixLQUFLRixPQUFPLENBQUNXLGNBQWMsQ0FBQ2MsTUFDOUJ2QixLQUFLRixPQUFPLENBQUN5QixJQUFJLElBQUksT0FBT2Y7aUJBRTVCUixLQUFLRixPQUFPLENBQUN5QixJQUFJLEdBQUdmO1FBQ3hCO1FBRUFSLEtBQUtILFNBQVMsR0FBRztJQUNuQjtBQUNGO0FBRUFKLFdBQVcyQixPQUFPLEdBQUc7SUFDbkIsR0FBSTtJQUNKLEdBQUk7SUFDSixHQUFJO0lBQ0osR0FBSTtJQUNKLEdBQUk7SUFDSixHQUFJO0lBQ0osR0FBSTtJQUNKLEdBQUk7SUFDSixHQUFJO0lBQ0osR0FBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0lBQ0osSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJO0FBQ047QUFFQSxJQUFJSSxVQUFVQyxRQUFRQyxPQUFPLEdBQ3pCRCxRQUFRQyxPQUFPLENBQUNDLEtBQUssQ0FBQyxXQUFXQyxHQUFHLENBQUMsU0FBU04sQ0FBQztJQUFJLE9BQU9PLFNBQVNQLEdBQUc7QUFBSSxLQUMxRSxFQUFFO0FBRU4sSUFBSUUsT0FBTyxDQUFDLEVBQUUsS0FBSyxLQUFLQSxPQUFPLENBQUMsRUFBRSxLQUFLLElBQUk7SUFDekMvQixXQUFXMkIsT0FBTyxDQUFDLEdBQUcsR0FBRztJQUN6QjNCLFdBQVcyQixPQUFPLENBQUMsR0FBRyxHQUFHO0lBQ3pCM0IsV0FBVzJCLE9BQU8sQ0FBQyxHQUFHLEdBQUc7SUFDekIzQixXQUFXMkIsT0FBTyxDQUFDLEdBQUcsR0FBRztJQUN6QjNCLFdBQVcyQixPQUFPLENBQUMsR0FBRyxHQUFHO0lBQ3pCM0IsV0FBVzJCLE9BQU8sQ0FBQyxHQUFHLEdBQUc7SUFDekIzQixXQUFXMkIsT0FBTyxDQUFDLEdBQUcsR0FBRztJQUN6QjNCLFdBQVcyQixPQUFPLENBQUMsR0FBRyxHQUFHO0lBQ3pCM0IsV0FBVzJCLE9BQU8sQ0FBQyxHQUFHLEdBQUc7SUFDekIzQixXQUFXMkIsT0FBTyxDQUFDLEdBQUcsR0FBRztBQUMzQjtBQUVBM0IsV0FBV3FDLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHO0lBQ2hDLE9BQU8sSUFBSSxDQUFDbEMsU0FBUztBQUN2QjtBQUVBSixXQUFXcUMsU0FBUyxDQUFDRSxLQUFLLEdBQUcsU0FBU0MsS0FBSztJQUN6QyxJQUFJQyxXQUFXLElBQUksQ0FBQ3RDLE9BQU8sQ0FBQ3VDLE9BQU8sQ0FBQ0YsT0FBTyxHQUFHQSxNQUFNN0IsTUFBTTtJQUUxRCxJQUFJLE9BQU84QixhQUFhLFVBQVU7UUFDaEMsSUFBSSxDQUFDRSxLQUFLLEdBQU9GO1FBQ2pCLElBQUksQ0FBQ3JDLFNBQVMsR0FBRztRQUNqQjtJQUNGO0lBRUEsSUFBSSxJQUFJLENBQUNBLFNBQVMsRUFDaEIsSUFBSSxDQUFDd0MsSUFBSSxHQUFHLFdBQVlKLE1BQU03QixNQUFNLEdBQ3hCNkIsTUFBTUssS0FBSyxDQUFDSixZQUNaL0MsT0FBT29ELEtBQUssQ0FBQztBQUM3QjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdoRCIsInNvdXJjZXMiOlsid2VicGFjazovL3lvdXNzZWYtcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL3dlYnNvY2tldC1kcml2ZXIvbGliL3dlYnNvY2tldC9odHRwX3BhcnNlci5qcz82ZTFjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIE5vZGVIVFRQUGFyc2VyID0gcmVxdWlyZSgnaHR0cC1wYXJzZXItanMnKS5IVFRQUGFyc2VyLFxuICAgIEJ1ZmZlciAgICAgICAgID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG5cbnZhciBUWVBFUyA9IHtcbiAgcmVxdWVzdDogIE5vZGVIVFRQUGFyc2VyLlJFUVVFU1QgIHx8ICdyZXF1ZXN0JyxcbiAgcmVzcG9uc2U6IE5vZGVIVFRQUGFyc2VyLlJFU1BPTlNFIHx8ICdyZXNwb25zZSdcbn07XG5cbnZhciBIdHRwUGFyc2VyID0gZnVuY3Rpb24odHlwZSkge1xuICB0aGlzLl90eXBlICAgICA9IHR5cGU7XG4gIHRoaXMuX3BhcnNlciAgID0gbmV3IE5vZGVIVFRQUGFyc2VyKFRZUEVTW3R5cGVdKTtcbiAgdGhpcy5fY29tcGxldGUgPSBmYWxzZTtcbiAgdGhpcy5oZWFkZXJzICAgPSB7fTtcblxuICB2YXIgY3VycmVudCA9IG51bGwsXG4gICAgICBzZWxmICAgID0gdGhpcztcblxuICB0aGlzLl9wYXJzZXIub25IZWFkZXJGaWVsZCA9IGZ1bmN0aW9uKGIsIHN0YXJ0LCBsZW5ndGgpIHtcbiAgICBjdXJyZW50ID0gYi50b1N0cmluZygndXRmOCcsIHN0YXJ0LCBzdGFydCArIGxlbmd0aCkudG9Mb3dlckNhc2UoKTtcbiAgfTtcblxuICB0aGlzLl9wYXJzZXIub25IZWFkZXJWYWx1ZSA9IGZ1bmN0aW9uKGIsIHN0YXJ0LCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBiLnRvU3RyaW5nKCd1dGY4Jywgc3RhcnQsIHN0YXJ0ICsgbGVuZ3RoKTtcblxuICAgIGlmIChzZWxmLmhlYWRlcnMuaGFzT3duUHJvcGVydHkoY3VycmVudCkpXG4gICAgICBzZWxmLmhlYWRlcnNbY3VycmVudF0gKz0gJywgJyArIHZhbHVlO1xuICAgIGVsc2VcbiAgICAgIHNlbGYuaGVhZGVyc1tjdXJyZW50XSA9IHZhbHVlO1xuICB9O1xuXG4gIHRoaXMuX3BhcnNlci5vbkhlYWRlcnNDb21wbGV0ZSA9IHRoaXMuX3BhcnNlcltOb2RlSFRUUFBhcnNlci5rT25IZWFkZXJzQ29tcGxldGVdID1cbiAgZnVuY3Rpb24obWFqb3JWZXJzaW9uLCBtaW5vclZlcnNpb24sIGhlYWRlcnMsIG1ldGhvZCwgcGF0aG5hbWUsIHN0YXR1c0NvZGUpIHtcbiAgICB2YXIgaW5mbyA9IGFyZ3VtZW50c1swXTtcblxuICAgIGlmICh0eXBlb2YgaW5mbyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1ldGhvZCAgICAgPSBpbmZvLm1ldGhvZDtcbiAgICAgIHBhdGhuYW1lICAgPSBpbmZvLnVybDtcbiAgICAgIHN0YXR1c0NvZGUgPSBpbmZvLnN0YXR1c0NvZGU7XG4gICAgICBoZWFkZXJzICAgID0gaW5mby5oZWFkZXJzO1xuICAgIH1cblxuICAgIHNlbGYubWV0aG9kICAgICA9ICh0eXBlb2YgbWV0aG9kID09PSAnbnVtYmVyJykgPyBIdHRwUGFyc2VyLk1FVEhPRFNbbWV0aG9kXSA6IG1ldGhvZDtcbiAgICBzZWxmLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgIHNlbGYudXJsICAgICAgICA9IHBhdGhuYW1lO1xuXG4gICAgaWYgKCFoZWFkZXJzKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGhlYWRlcnMubGVuZ3RoLCBrZXksIHZhbHVlOyBpIDwgbjsgaSArPSAyKSB7XG4gICAgICBrZXkgICA9IGhlYWRlcnNbaV0udG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhbHVlID0gaGVhZGVyc1tpKzFdO1xuICAgICAgaWYgKHNlbGYuaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShrZXkpKVxuICAgICAgICBzZWxmLmhlYWRlcnNba2V5XSArPSAnLCAnICsgdmFsdWU7XG4gICAgICBlbHNlXG4gICAgICAgIHNlbGYuaGVhZGVyc1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgc2VsZi5fY29tcGxldGUgPSB0cnVlO1xuICB9O1xufTtcblxuSHR0cFBhcnNlci5NRVRIT0RTID0ge1xuICAwOiAgJ0RFTEVURScsXG4gIDE6ICAnR0VUJyxcbiAgMjogICdIRUFEJyxcbiAgMzogICdQT1NUJyxcbiAgNDogICdQVVQnLFxuICA1OiAgJ0NPTk5FQ1QnLFxuICA2OiAgJ09QVElPTlMnLFxuICA3OiAgJ1RSQUNFJyxcbiAgODogICdDT1BZJyxcbiAgOTogICdMT0NLJyxcbiAgMTA6ICdNS0NPTCcsXG4gIDExOiAnTU9WRScsXG4gIDEyOiAnUFJPUEZJTkQnLFxuICAxMzogJ1BST1BQQVRDSCcsXG4gIDE0OiAnU0VBUkNIJyxcbiAgMTU6ICdVTkxPQ0snLFxuICAxNjogJ0JJTkQnLFxuICAxNzogJ1JFQklORCcsXG4gIDE4OiAnVU5CSU5EJyxcbiAgMTk6ICdBQ0wnLFxuICAyMDogJ1JFUE9SVCcsXG4gIDIxOiAnTUtBQ1RJVklUWScsXG4gIDIyOiAnQ0hFQ0tPVVQnLFxuICAyMzogJ01FUkdFJyxcbiAgMjQ6ICdNLVNFQVJDSCcsXG4gIDI1OiAnTk9USUZZJyxcbiAgMjY6ICdTVUJTQ1JJQkUnLFxuICAyNzogJ1VOU1VCU0NSSUJFJyxcbiAgMjg6ICdQQVRDSCcsXG4gIDI5OiAnUFVSR0UnLFxuICAzMDogJ01LQ0FMRU5EQVInLFxuICAzMTogJ0xJTksnLFxuICAzMjogJ1VOTElOSydcbn07XG5cbnZhciBWRVJTSU9OID0gcHJvY2Vzcy52ZXJzaW9uXG4gID8gcHJvY2Vzcy52ZXJzaW9uLm1hdGNoKC9bMC05XSsvZykubWFwKGZ1bmN0aW9uKG4pIHsgcmV0dXJuIHBhcnNlSW50KG4sIDEwKSB9KVxuICA6IFtdO1xuXG5pZiAoVkVSU0lPTlswXSA9PT0gMCAmJiBWRVJTSU9OWzFdID09PSAxMikge1xuICBIdHRwUGFyc2VyLk1FVEhPRFNbMTZdID0gJ1JFUE9SVCc7XG4gIEh0dHBQYXJzZXIuTUVUSE9EU1sxN10gPSAnTUtBQ1RJVklUWSc7XG4gIEh0dHBQYXJzZXIuTUVUSE9EU1sxOF0gPSAnQ0hFQ0tPVVQnO1xuICBIdHRwUGFyc2VyLk1FVEhPRFNbMTldID0gJ01FUkdFJztcbiAgSHR0cFBhcnNlci5NRVRIT0RTWzIwXSA9ICdNLVNFQVJDSCc7XG4gIEh0dHBQYXJzZXIuTUVUSE9EU1syMV0gPSAnTk9USUZZJztcbiAgSHR0cFBhcnNlci5NRVRIT0RTWzIyXSA9ICdTVUJTQ1JJQkUnO1xuICBIdHRwUGFyc2VyLk1FVEhPRFNbMjNdID0gJ1VOU1VCU0NSSUJFJztcbiAgSHR0cFBhcnNlci5NRVRIT0RTWzI0XSA9ICdQQVRDSCc7XG4gIEh0dHBQYXJzZXIuTUVUSE9EU1syNV0gPSAnUFVSR0UnO1xufVxuXG5IdHRwUGFyc2VyLnByb3RvdHlwZS5pc0NvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9jb21wbGV0ZTtcbn07XG5cbkh0dHBQYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgdmFyIGNvbnN1bWVkID0gdGhpcy5fcGFyc2VyLmV4ZWN1dGUoY2h1bmssIDAsIGNodW5rLmxlbmd0aCk7XG5cbiAgaWYgKHR5cGVvZiBjb25zdW1lZCAhPT0gJ251bWJlcicpIHtcbiAgICB0aGlzLmVycm9yICAgICA9IGNvbnN1bWVkO1xuICAgIHRoaXMuX2NvbXBsZXRlID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5fY29tcGxldGUpXG4gICAgdGhpcy5ib2R5ID0gKGNvbnN1bWVkIDwgY2h1bmsubGVuZ3RoKVxuICAgICAgICAgICAgICA/IGNodW5rLnNsaWNlKGNvbnN1bWVkKVxuICAgICAgICAgICAgICA6IEJ1ZmZlci5hbGxvYygwKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSHR0cFBhcnNlcjtcbiJdLCJuYW1lcyI6WyJOb2RlSFRUUFBhcnNlciIsInJlcXVpcmUiLCJIVFRQUGFyc2VyIiwiQnVmZmVyIiwiVFlQRVMiLCJyZXF1ZXN0IiwiUkVRVUVTVCIsInJlc3BvbnNlIiwiUkVTUE9OU0UiLCJIdHRwUGFyc2VyIiwidHlwZSIsIl90eXBlIiwiX3BhcnNlciIsIl9jb21wbGV0ZSIsImhlYWRlcnMiLCJjdXJyZW50Iiwic2VsZiIsIm9uSGVhZGVyRmllbGQiLCJiIiwic3RhcnQiLCJsZW5ndGgiLCJ0b1N0cmluZyIsInRvTG93ZXJDYXNlIiwib25IZWFkZXJWYWx1ZSIsInZhbHVlIiwiaGFzT3duUHJvcGVydHkiLCJvbkhlYWRlcnNDb21wbGV0ZSIsImtPbkhlYWRlcnNDb21wbGV0ZSIsIm1ham9yVmVyc2lvbiIsIm1pbm9yVmVyc2lvbiIsIm1ldGhvZCIsInBhdGhuYW1lIiwic3RhdHVzQ29kZSIsImluZm8iLCJhcmd1bWVudHMiLCJ1cmwiLCJNRVRIT0RTIiwiaSIsIm4iLCJrZXkiLCJWRVJTSU9OIiwicHJvY2VzcyIsInZlcnNpb24iLCJtYXRjaCIsIm1hcCIsInBhcnNlSW50IiwicHJvdG90eXBlIiwiaXNDb21wbGV0ZSIsInBhcnNlIiwiY2h1bmsiLCJjb25zdW1lZCIsImV4ZWN1dGUiLCJlcnJvciIsImJvZHkiLCJzbGljZSIsImFsbG9jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/http_parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/websocket-driver/lib/websocket/streams.js":
/*!****************************************************************!*\
  !*** ./node_modules/websocket-driver/lib/websocket/streams.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n\nStreams in a WebSocket connection\n---------------------------------\n\nWe model a WebSocket as two duplex streams: one stream is for the wire protocol\nover an I/O socket, and the other is for incoming/outgoing messages.\n\n\n                        +----------+      +---------+      +----------+\n    [1] write(chunk) -->| ~~~~~~~~ +----->| parse() +----->| ~~~~~~~~ +--> emit('data') [2]\n                        |          |      +----+----+      |          |\n                        |          |           |           |          |\n                        |    IO    |           | [5]       | Messages |\n                        |          |           V           |          |\n                        |          |      +---------+      |          |\n    [4] emit('data') <--+ ~~~~~~~~ |<-----+ frame() |<-----+ ~~~~~~~~ |<-- write(chunk) [3]\n                        +----------+      +---------+      +----------+\n\n\nMessage transfer in each direction is simple: IO receives a byte stream [1] and\nsends this stream for parsing. The parser will periodically emit a complete\nmessage text on the Messages stream [2]. Similarly, when messages are written\nto the Messages stream [3], they are framed using the WebSocket wire format and\nemitted via IO [4].\n\nThere is a feedback loop via [5] since some input from [1] will be things like\nping, pong and close frames. In these cases the protocol responds by emitting\nresponses directly back to [4] rather than emitting messages via [2].\n\nFor the purposes of flow control, we consider the sources of each Readable\nstream to be as follows:\n\n* [2] receives input from [1]\n* [4] receives input from [1] and [3]\n\nThe classes below express the relationships described above without prescribing\nanything about how parse() and frame() work, other than assuming they emit\n'data' events to the IO and Messages streams. They will work with any protocol\ndriver having these two methods.\n**/ var Stream = (__webpack_require__(/*! stream */ \"stream\").Stream), util = __webpack_require__(/*! util */ \"util\");\nvar IO = function(driver) {\n    this.readable = this.writable = true;\n    this._paused = false;\n    this._driver = driver;\n};\nutil.inherits(IO, Stream);\n// The IO pause() and resume() methods will be called when the socket we are\n// piping to gets backed up and drains. Since IO output [4] comes from IO input\n// [1] and Messages input [3], we need to tell both of those to return false\n// from write() when this stream is paused.\nIO.prototype.pause = function() {\n    this._paused = true;\n    this._driver.messages._paused = true;\n};\nIO.prototype.resume = function() {\n    this._paused = false;\n    this.emit(\"drain\");\n    var messages = this._driver.messages;\n    messages._paused = false;\n    messages.emit(\"drain\");\n};\n// When we receive input from a socket, send it to the parser and tell the\n// source whether to back off.\nIO.prototype.write = function(chunk) {\n    if (!this.writable) return false;\n    this._driver.parse(chunk);\n    return !this._paused;\n};\n// The IO end() method will be called when the socket piping into it emits\n// 'close' or 'end', i.e. the socket is closed. In this situation the Messages\n// stream will not emit any more data so we emit 'end'.\nIO.prototype.end = function(chunk) {\n    if (!this.writable) return;\n    if (chunk !== undefined) this.write(chunk);\n    this.writable = false;\n    var messages = this._driver.messages;\n    if (messages.readable) {\n        messages.readable = messages.writable = false;\n        messages.emit(\"end\");\n    }\n};\nIO.prototype.destroy = function() {\n    this.end();\n};\nvar Messages = function(driver) {\n    this.readable = this.writable = true;\n    this._paused = false;\n    this._driver = driver;\n};\nutil.inherits(Messages, Stream);\n// The Messages pause() and resume() methods will be called when the app that's\n// processing the messages gets backed up and drains. If we're emitting\n// messages too fast we should tell the source to slow down. Message output [2]\n// comes from IO input [1].\nMessages.prototype.pause = function() {\n    this._driver.io._paused = true;\n};\nMessages.prototype.resume = function() {\n    this._driver.io._paused = false;\n    this._driver.io.emit(\"drain\");\n};\n// When we receive messages from the user, send them to the formatter and tell\n// the source whether to back off.\nMessages.prototype.write = function(message) {\n    if (!this.writable) return false;\n    if (typeof message === \"string\") this._driver.text(message);\n    else this._driver.binary(message);\n    return !this._paused;\n};\n// The Messages end() method will be called when a stream piping into it emits\n// 'end'. Many streams may be piped into the WebSocket and one of them ending\n// does not mean the whole socket is done, so just process the input and move\n// on leaving the socket open.\nMessages.prototype.end = function(message) {\n    if (message !== undefined) this.write(message);\n};\nMessages.prototype.destroy = function() {};\nexports.IO = IO;\nexports.Messages = Messages;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/websocket-driver/lib/websocket/streams.js\n");

/***/ })

};
;